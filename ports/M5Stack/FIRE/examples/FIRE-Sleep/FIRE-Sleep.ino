// This Arduino code was automatically generated by Aixt Project
//     https://github.com/fermarsan/aixt
// Device = FIRE
// Board = M5Stack FIRE
// Backend = arduino

#include <M5Stack.h>
#include <string.h>
#include <stdio.h>
typedef int8_t i8;
typedef int16_t i16;
typedef int32_t i32;
typedef int64_t i64;
typedef int32_t isize;
typedef int32_t int_literal;
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;
typedef uint32_t usize;
typedef float f32;
typedef double f64;
typedef double float_literal;

#define _const_main__cpu_freq_mhz	_const_main__cpu_freq/1000000
#define _const_main__cpu_freq  240000000

#define M5_BEGIN()      M5.begin()
#define M5_UPDATE()     M5.update()

#define M5_LCD_SETBRIGHTNESS(brightness)                                M5.lcd.setBrightness(brightness)
#define M5_LCD_DRAWPIXEL(x, y, color)                                   M5.lcd.drawPixel(x, y, color)
#define M5_LCD_DRAWLINE(x0, y0, x1, y1, color)                          M5.lcd.drawLine(x0, y0, x1, y1, color)
#define M5_LCD_FILLRECT(x, y, w, h, color)                              M5.lcd.fillRect(x, y, w, h, color)
#define M5_LCD_FILLSCREEN(color)                                        M5.lcd.fillScreen(color)
#define M5_LCD_DRAWCIRCLE(x0, y0, r, color)                             M5.lcd.drawCircle(x0, y0, r, color)
#define M5_LCD_DRAWCIRCLEHELPER(x0, y0, r, cornername, color)           M5.lcd.drawCircleHelper(x0, y0, r, cornername, color)
#define M5_LCD_FILLCIRCLE(x0, y0, r, color)                             M5.lcd.fillCircle(x0, y0, r, color)
#define M5_LCD_FILLCIRCLEHELPER(x0, y0, r, cornername, delta, color)    M5.lcd.fillCircleHelper(x0, y0, r, cornername, delta, color)
#define M5_LCD_DRAWTRIANGLE(x0, y0, x1, y1, x2, y2, color)              M5.lcd.drawTriangle(x0, y0, x1, y1, x2, y2, color)
#define M5_LCD_FILLTRIANGLE(x0, y0, x1, y1, x2, y2, color)              M5.lcd.fillTriangle(x0, y0, x1, y1, x2, y2, color)
#define M5_LCD_DRAWROUNDRECT(x0, y0, w, h, radius, color)               M5.lcd.drawRoundRect(x0, y0, w, h, radius, color)
#define M5_LCD_FILLROUNDRECT(x0, y0, w, h, radius, color)               M5.lcd.fillRoundRect(x0, y0, w, h, radius, color)
#define M5_LCD_DRAWBITMAP(x, y, bitmap, w, h, color)                    M5.lcd.drawBitmap(x, y, bitmap, w, h, color)
#define M5_LCD_DRAWRGBBITMAP(x, y, bitmap, w, h)                        M5.lcd.drawRGBBitmap(x, y, bitmap, w, h)
#define M5_LCD_DRAWCHAR(x, y, c, color, bg, size)                       M5.lcd.drawChar(x, y, c, color, bg, size)
#define M5_LCD_SETCURSOR(x0, y0)                                        M5.lcd.setCursor(x0, y0)
#define M5_LCD_SETTEXTCOLOR(color)                                      M5.lcd.setTextColor(color)
#define M5_LCD_SETTEXTCOLORBG(color, bgcolor)                           M5.lcd.setTextColor(color, bgcolor)
#define M5_LCD_SETTEXTSIZE(size)                                        M5.lcd.setTextSize(size)
#define M5_LCD_SETTEXTWRAP(w)                                           M5.lcd.setTextWrap(w)
#define M5_LCD_PRINT(str)                                               M5.lcd.print(str)
#define M5_LCD_PRINTLN(str)                                             M5.lcd.println(str)
#define M5_LCD_DRAWCENTRESTRING(str, dx, poy, font)                     M5.lcd.drawCentreString(str, dx, poy, font)
#define M5_LCD_DRAWRIGHTSTRING(str, dx, poy, font)                      M5.lcd.drawRightString(str, dx, poy, font)
#define M5_LCD_DRAWJPG(jpg_data, jpg_len, x, y)                         M5.lcd.drawJpg(jpg_data, jpg_len, x, y)
#define M5_LCD_DRAWJPGFILE(fs, path, x, y)                              M5.lcd.drawJpgFile(fs, path, x, y)
#define M5_LCD_DRAWBMPFILE(fs, path, x, y)                              M5.lcd.drawBmpFile(fs, path, x, y)
#define M5_LCD_CLEAR(color)                                             M5.Lcd.clear(color)

#define M5_BTNA_READ()                                  M5.BtnA.read() // Must be called in loop(), or via update() 
#define M5_BTNA_ISPRESSED()                             M5.BtnA.isPressed()                        
#define M5_BTNA_ISRELEASED()                            M5.BtnA.isReleased()                        
#define M5_BTNA_WASPRESSED()                            M5.BtnA.wasPressed()                        
#define M5_BTNA_WASRELEASED()                           M5.BtnA.wasReleased()                        
#define M5_BTNA_WASRELEASEDFOR(ms)                      M5.BtnA.wasReleasefor(ms)    
#define M5_BTNA_PRESSEDFOR(ms)                          M5.BtnA.pressedFor(ms)       
#define M5_BTNA_PRESSEDFORCTIME(ms, continuous_time)    M5.BtnA.pressedFor(ms, continuous_time)                                  
#define M5_BTNA_RELEASEDFOR(ms)                         M5.BtnA.releasedFor(ms)                                    
#define M5_BTNA_LASTCHANGE()                            M5.BtnA.lastChange()                        
#define M5_BTNB_READ()                                  M5.BtnB.read() // Must be called in loop(), or via update() 
#define M5_BTNB_ISPRESSED()                             M5.BtnB.isPressed()                        
#define M5_BTNB_ISRELEASED()                            M5.BtnB.isReleased()                        
#define M5_BTNB_WASPRESSED()                            M5.BtnB.wasPressed()                        
#define M5_BTNB_WASRELEASED()                           M5.BtnB.wasReleased()                        
#define M5_BTNB_WASRELEASEDFOR(ms)                      M5.BtnB.wasReleasefor(ms)    
#define M5_BTNB_PRESSEDFOR(ms)                          M5.BtnB.pressedFor(ms)       
#define M5_BTNB_PRESSEDFORCTIME(ms, continuous_time)    M5.BtnB.pressedFor(ms, continuous_time)                                  
#define M5_BTNB_RELEASEDFOR(ms)                         M5.BtnB.releasedFor(ms)                                    
#define M5_BTNB_LASTCHANGE()                            M5.BtnB.lastChange()    
#define M5_BTNC_READ()                                  M5.BtnC.read() // Must be called in loop(), or via update() 
#define M5_BTNC_ISPRESSED()                             M5.BtnC.isPressed()                        
#define M5_BTNC_ISRELEASED()                            M5.BtnC.isReleased()                        
#define M5_BTNC_WASPRESSED()                            M5.BtnC.wasPressed()                        
#define M5_BTNC_WASRELEASED()                           M5.BtnC.wasReleased()                        
#define M5_BTNC_WASRELEASEDFOR(ms)                      M5.BtnC.wasReleasefor(ms)    
#define M5_BTNC_PRESSEDFOR(ms)                          M5.BtnC.pressedFor(ms)       
#define M5_BTNC_PRESSEDFORCTIME(ms, continuous_time)    M5.BtnC.pressedFor(ms, continuous_time)                                  
#define M5_BTNC_RELEASEDFOR(ms)                         M5.BtnC.releasedFor(ms)                                    
#define M5_BTNC_LASTCHANGE()                            M5.BtnC.lastChange()    

void  button__read(u8 btn);
bool  button__is_pressed(u8 btn);
bool  button__is_released(u8 btn);
bool  button__was_pressed(u8 btn);
bool  button__was_released(u8 btn);
bool  button__was_released_for(u8 btn, u32 ms);
bool  button__pressed_for(u8 btn, u32 ms);
bool  button__pressed_for_ctime(u8 btn, u32 ms, u32 continuous_time);
bool  button__released_for(u8 btn, u32 ms);
void  button__last_change(u8 btn);

#define M5_POWER_BEGIN()                        M5.Power.begin()
#define M5_POWER_CANCONTROL()                   M5.Power.canControl()
#define M5_POWER_SETPOWERBOOSTKEEPON(en)        M5.Power.setPowerBoostKeepOn(en)
#define M5_POWER_SETAUTOBOOTONLOAD(en)          M5.Power.setAutoBootOnLoad(en)
#define M5_POWER_SETLOWPOWERSHUTDOWNTIME(time)  M5.Power.setLowPowerShutdownTime(time)
#define M5_POWER_SETPOWERBOOSTONOFF(en)         M5.Power.setPowerBoostOnOff(en)
#define M5_POWER_SETPOWERBOOSTSET(en)           M5.Power.setPowerBoostSet(en)
#define M5_POWER_SETPOWERVIN(en)                M5.Power.setPowerVin(en)
#define M5_POWER_SETPOWERWLEDSET(en)            M5.Power.setPowerWLEDSet(en)
#define M5_POWER_SETPOWERBTNEN(en)              M5.Power.setPowerBtnEn(en)
#define M5_POWER_SETVINMAXCURRENT(cur)          M5.Power.setVinMaxCurrent(cur)
#define M5_POWER_SETCHARGEVOLT(volt)            M5.Power.setChargeVolt(volt)
#define M5_POWER_SETCHARGE(en)                  M5.Power.setCharge(en)
#define M5_POWER_ISCHARGEFULL()                 M5.Power.isChargeFull()
#define M5_POWER_ISCHARGING()                   M5.Power.isCharging()
#define M5_POWER_GETBATTERYLEVEL()              M5.Power.getBatteryLevel()
#define M5_POWER_BATTERYMODE(en)                M5.Power.batteryMode(en)
#define M5_POWER_SETWAKEUPBUTTON(button)        M5.Power.setWakeupButton(button)
#define M5_POWER_ISRESETBYWATCHDOG()            M5.Power.isResetbyWatchdog()
#define M5_POWER_ISRESETBYDEEPSLEEP()           M5.Power.isResetbyDeepsleep()
#define M5_POWER_ISRESETBYSOFTWARE()            M5.Power.isResetbySoftware()
#define M5_POWER_ISRESETBYPOWERSW()             M5.Power.isResetbyPowerSW()
#define M5_POWER_DEEPSLEEP(time_in_us)          M5.Power.deepSleep(time_in_us)
#define M5_POWER_LIGHTSLEEP(time_in_us)         M5.Power.lightSleep(time_in_us)
#define M5_POWER_POWEROFF()                     M5.Power.powerOFF()
#define M5_POWER_RESET()                        M5.Power.reset()

void  time__sleep(i32 ts);
void  time__sleep_ms(i32 tms);
void  time__sleep_us(i32 tus);
char __temp_str[50];

#define main__init() M5_BEGIN()

#define main__update() M5_UPDATE()

#define _const_lcd__red (u16)(RED)
#define _const_lcd__green (u16)(GREEN)
#define _const_lcd__blue (u16)(BLUE)
#define _const_lcd__yellow (u16)(YELLOW)
#define _const_lcd__cyan (u16)(CYAN)
#define _const_lcd__magenta (u16)(MAGENTA)
#define _const_lcd__white (u16)(WHITE)
#define _const_lcd__black (u16)(BLACK)
#define _const_lcd__gray (u16)(GRAY)

#define lcd__brightness(brightness) M5_LCD_SETBRIGHTNESS(brightness)

#define lcd__draw_pixel(x, y, color) M5_LCD_DRAWPIXEL(x, y, color)

#define lcd__draw_line(x0, y0, x1, y1, color) M5_LCD_DRAWLINE(x0, y0, x1, y1, color)

#define lcd__fill_rect(x, y, w, h, color) M5_LCD_FILLRECT(x, y, w, h, color)

#define lcd__fill_screen(color) M5_LCD_FILLSCREEN(color)

#define lcd__circle(x0, y0, r, color) M5_LCD_DRAWCIRCLE(x0, y0, r, color)

#define lcd__circle_helper(x0, y0, r, cornername, color) M5_LCD_DRAWCIRCLEHELPER(x0, y0, r, cornername, color)

#define lcd__fill_circle(x0, y0, r, color) M5_LCD_FILLCIRCLE(x0, y0, r, color)

#define lcd__fill_circle_helper(x0, y0, r, cornername, delta, color) M5_LCD_FILLCIRCLEHELPER(x0, y0, r, cornername, delta, color)

#define lcd__triangle(x0, y0, x1, y1, x2, y2, color) M5_LCD_DRAWTRIANGLE(x0, y0, x1, y1, x2, y2, color)

#define lcd__fill_triangle(x0, y0, x1, y1, x2, y2, color) M5_LCD_FILLTRIANGLE(x0, y0, x1, y1, x2, y2, color)

#define lcd__round_rect(x0, y0, w, h, radius, color) M5_LCD_DRAWROUNDRECT(x0, y0, w, h, radius, color)

#define lcd__fill_round_rect(x0, y0, w, h, radius, color) M5_LCD_FILLROUNDRECT(x0, y0, w, h, radius, color)

#define lcd__bitmap(x, y, bitmap, w, h, color) M5_LCD_DRAWBITMAP(x, y, bitmap, w, h, color)

#define lcd__rgb_bitmap(x, y, bitmap, w, h) M5_LCD_DRAWRGBBITMAP(x, y, bitmap, w, h)

#define lcd__char(x, y, c, color, bg, size) M5_LCD_DRAWCHAR(x, y, c, color, bg, size)

#define lcd__cursor(x0, y0) M5_LCD_SETCURSOR(x0, y0)

#define lcd__text_color(color) M5_LCD_SETTEXTCOLOR(color)

#define lcd__text_color_bg(color, bgcolor) M5_LCD_SETTEXTCOLORBG(color, bgcolor)

#define lcd__text_size(size) M5_LCD_SETTEXTSIZE(size)

#define lcd__text_wrap(w) M5_LCD_SETTEXTWRAP(w)

#define lcd__print(str) M5_LCD_PRINT(str)

#define lcd__println(str) M5_LCD_PRINTLN(str)

#define lcd__centre_string(str, dx, poy, font) M5_LCD_DRAWCENTRESTRING(str, dx, poy, font)

#define lcd__right_string(str, dx, poy, font) M5_LCD_DRAWRIGHTSTRING(str, dx, poy, font)

#define lcd__jpg(jpg_data, jpg_len, x, y) M5_LCD_DRAWJPG(jpg_data, jpg_len, x, y)

#define lcd__jpg_file(fs, path, x, y) M5_LCD_DRAWJPGFILE(fs, path, x, y)

#define lcd__bmp_file(fs, path, x, y) M5_LCD_DRAWBMPFILE(fs, path, x, y)

#define lcd__clear(color) M5_LCD_CLEAR(color)

const u8 _const_button__a_pin = (u8)(39);
const u8 _const_button__b_pin = (u8)(38);
const u8 _const_button__c_pin = (u8)(37);
const u8 _const_button__a = (u8)(0);
const u8 _const_button__b = (u8)(1);
const u8 _const_button__c = (u8)(2);

inline void  button__read(u8 btn) {
	switch (btn) { 
		case _const_button__a: 
		{ 
			M5_BTNA_READ();  
			break; 
		}  
		case _const_button__b: 
		{ 
			M5_BTNB_READ();  
			break; 
		}  
		case _const_button__c: 
		{ 
			M5_BTNC_READ();  
			break; 
		}  
		default: { 
			break; 
		}  
	}; 
}

inline bool  button__is_pressed(u8 btn) {
	switch (btn) { 
		case _const_button__a: 
		{ 
			return M5_BTNA_ISPRESSED();  
			break; 
		}  
		case _const_button__b: 
		{ 
			return M5_BTNB_ISPRESSED();  
			break; 
		}  
		case _const_button__c: 
		{ 
			return M5_BTNC_ISPRESSED();  
			break; 
		}  
		default: { 
			return false; 
			break; 
		}  
	}; 
}

inline bool  button__is_released(u8 btn) {
	switch (btn) { 
		case _const_button__a: 
		{ 
			return M5_BTNA_ISRELEASED();  
			break; 
		}  
		case _const_button__b: 
		{ 
			return M5_BTNB_ISRELEASED();  
			break; 
		}  
		case _const_button__c: 
		{ 
			return M5_BTNC_ISRELEASED();  
			break; 
		}  
		default: { 
			return false; 
			break; 
		}  
	}; 
}

inline bool  button__was_pressed(u8 btn) {
	switch (btn) { 
		case _const_button__a: 
		{ 
			return M5_BTNA_WASPRESSED();  
			break; 
		}  
		case _const_button__b: 
		{ 
			return M5_BTNB_WASPRESSED();  
			break; 
		}  
		case _const_button__c: 
		{ 
			return M5_BTNC_WASPRESSED();  
			break; 
		}  
		default: { 
			return false; 
			break; 
		}  
	}; 
}

inline bool  button__was_released(u8 btn) {
	switch (btn) { 
		case _const_button__a: 
		{ 
			return M5_BTNA_WASRELEASED();  
			break; 
		}  
		case _const_button__b: 
		{ 
			return M5_BTNB_WASRELEASED();  
			break; 
		}  
		case _const_button__c: 
		{ 
			return M5_BTNC_WASRELEASED();  
			break; 
		}  
		default: { 
			return false; 
			break; 
		}  
	}; 
}

inline bool  button__was_released_for(u8 btn, u32 ms) {
	switch (btn) { 
		case _const_button__a: 
		{ 
			return M5_BTNA_WASRELEASEDFOR(ms);  
			break; 
		}  
		case _const_button__b: 
		{ 
			return M5_BTNB_WASRELEASEDFOR(ms);  
			break; 
		}  
		case _const_button__c: 
		{ 
			return M5_BTNC_WASRELEASEDFOR(ms);  
			break; 
		}  
		default: { 
			return false; 
			break; 
		}  
	}; 
}

inline bool  button__pressed_for(u8 btn, u32 ms) {
	switch (btn) { 
		case _const_button__a: 
		{ 
			return M5_BTNA_PRESSEDFOR(ms);  
			break; 
		}  
		case _const_button__b: 
		{ 
			return M5_BTNB_PRESSEDFOR(ms);  
			break; 
		}  
		case _const_button__c: 
		{ 
			return M5_BTNC_PRESSEDFOR(ms);  
			break; 
		}  
		default: { 
			return false; 
			break; 
		}  
	}; 
}

inline bool  button__pressed_for_ctime(u8 btn, u32 ms, u32 continuous_time) {
	switch (btn) { 
		case _const_button__a: 
		{ 
			return M5_BTNA_PRESSEDFORCTIME(ms, continuous_time);  
			break; 
		}  
		case _const_button__b: 
		{ 
			return M5_BTNB_PRESSEDFORCTIME(ms, continuous_time);  
			break; 
		}  
		case _const_button__c: 
		{ 
			return M5_BTNC_PRESSEDFORCTIME(ms, continuous_time);  
			break; 
		}  
		default: { 
			return false; 
			break; 
		}  
	}; 
}

inline bool  button__released_for(u8 btn, u32 ms) {
	switch (btn) { 
		case _const_button__a: 
		{ 
			return M5_BTNA_RELEASEDFOR(ms);  
			break; 
		}  
		case _const_button__b: 
		{ 
			return M5_BTNB_RELEASEDFOR(ms);  
			break; 
		}  
		case _const_button__c: 
		{ 
			return M5_BTNC_RELEASEDFOR(ms);  
			break; 
		}  
		default: { 
			return false; 
			break; 
		}  
	}; 
}

inline void  button__last_change(u8 btn) {
	switch (btn) { 
		case _const_button__a: 
		{ 
			M5_BTNA_LASTCHANGE();  
			break; 
		}  
		case _const_button__b: 
		{ 
			M5_BTNB_LASTCHANGE();  
			break; 
		}  
		case _const_button__c: 
		{ 
			M5_BTNC_LASTCHANGE();  
			break; 
		}  
		default: { 
			break; 
		}  
	}; 
}

#define power__setup() M5_POWER_BEGIN()

#define power__can_control()  M5_POWER_CANCONTROL()

#define power__power_boost_keep_on(en)  M5_POWER_SETPOWERBOOSTKEEPON(en)

#define power__auto_boot_on_load(en)  M5_POWER_SETAUTOBOOTONLOAD(en)

#define power__low_power_shutdown_time(time)  M5_POWER_SETLOWPOWERSHUTDOWNTIME(time)

#define power__power_boost_on_off(en)  M5_POWER_SETPOWERBOOSTONOFF(en)

#define power__power_boost_set(en)  M5_POWER_SETPOWERBOOSTSET(en)

#define power__power_vin(en)  M5_POWER_SETPOWERVIN(en)

#define power__power_wled_set(en)  M5_POWER_SETPOWERWLEDSET(en)

#define power__power_btn_en(en)  M5_POWER_SETPOWERBTNEN(en)

#define power__vin_max_current(cur)  M5_POWER_SETVINMAXCURRENT(cur)

#define power__charge_volt(volt)  M5_POWER_SETCHARGEVOLT(volt)

#define power__charge(en)  M5_POWER_SETCHARGE(en)

#define power__is_charge_full()  M5_POWER_ISCHARGEFULL()

#define power__is_charging()  M5_POWER_ISCHARGING()

#define power__read_battery_level()  M5_POWER_GETBATTERYLEVEL()

#define power__battery_mode(en)  M5_POWER_BATTERYMODE(en)

#define power__wakeup_button(button) M5_POWER_SETWAKEUPBUTTON(button)

#define power__is_resetby_watchdog()  M5_POWER_ISRESETBYWATCHDOG()

#define power__is_resetby_deepsleep()  M5_POWER_ISRESETBYDEEPSLEEP()

#define power__is_resetby_software()  M5_POWER_ISRESETBYSOFTWARE()

#define power__is_resetby_power_sw()  M5_POWER_ISRESETBYPOWERSW()

#define power__deep_sleep(time_in_us) M5_POWER_DEEPSLEEP(time_in_us)

#define power__light_sleep(time_in_us) M5_POWER_LIGHTSLEEP(time_in_us)

#define power__power_off() M5_POWER_POWEROFF()

#define power__reset() M5_POWER_RESET()

#define power__msec(us)  ((u64)(us) * (u64)(1000))

#define power__sec(us)  ((u64)(us) * (u64)(1000000))

#define power__min(us)  ((u64)(us) * (u64)(60) * (u64)(1000000))

#define power__hr(us)  ((u64)(us) * (u64)(60) * (u64)(60) * (u64)(1000000))

inline void  time__sleep(i32 ts) {
	delay(ts * 1000); 
}

inline void  time__sleep_ms(i32 tms) {
	delay(tms); 
}

inline void  time__sleep_us(i32 tus) {
	delayMicroseconds(tus); 
}

void setup() {
	main__init();
	power__setup(); 
	power__wakeup_button(_const_button__a_pin); 
	lcd__brightness(200); 
	lcd__text_size(2); 
	while( true ) {
		main__update(); 
		if( power__is_resetby_power_sw() ) {
			char power_sw[50];
			strcpy(power_sw, "POWER-SW"); 
		}
		else {
			char power_sw[50];
			strcpy(power_sw, ""); 
		} 
		if( power__is_resetby_deepsleep() ) {
			char deepsleep_end[50];
			strcpy(deepsleep_end, "DeepSleep-end"); 
		}
		else {
			char deepsleep_end[50];
			strcpy(deepsleep_end, ""); 
		} 
		lcd__println("<Sleep test>"); 
		sprintf(__temp_str, "power-on triggered at:%s%s\n", power_sw, deepsleep_end);
		lcd__println(__temp_str); 
		lcd__println("Go lightSleep (5s or press buttonA wake up)"); 
		time__sleep(5); 
		power__light_sleep(power__sec(10)); 
		lcd__println("Go lightSleep (press buttonA wake up)"); 
		time__sleep(5); 
		power__light_sleep(0); 
		lcd__println("resume.\n\nGo deepSleep (press buttonA wake up) "); 
		time__sleep(5); 
		power__deep_sleep(0); 
	} 
}

void loop(){
}
