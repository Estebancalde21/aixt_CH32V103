// This Arduino code was automatically generated by Aixt Project
//     https://github.com/fermarsan/aixt
// Device = Arduino-Uno
// Board = Arduino Uno
// Backend = arduino

#include <Wire.h>
typedef int8_t i8;
typedef int16_t i16;
typedef int32_t i32;
typedef int64_t i64;
typedef int8_t isize;
typedef int32_t int_literal;
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;
typedef uint8_t usize;
typedef float f32;
typedef double f64;
typedef double float_literal;
typedef char rune;

#define _const_main__cpu_freq_mhz	_const_main__cpu_freq/1000000
#define _const_main__cpu_freq  16000000

// Project Name: Aixt, https://github.com/fermarsan/aixt.git
// Author: Juan Pablo Bernal - Daniela Mendoza Deantonio - Fernando Martinez Santa 
// Date: 2024

#define WIRE_BEGIN(...)                         Wire.begin(__VA_ARGS__)  
#define WIRE_END()                              Wire.end()
#define WIRE_REQUESTFROM(ADDRESS,QUANTITY)      Wire.requestFrom(ADDRESS,QUANTITY)
#define WIRE_BEGINTRANSMISSION(ADDRESS)         Wire.beginTransmission(ADDRESS)
#define WIRE_ENDTRANSMISSION()                  Wire.endTransmission()     
#define WIRE_WRITE(DATA)                        Wire.write(DATA)
#define WIRE_AVAILABLE()                        Wire.available()
#define WIRE_READ()                             Wire.read()
#define WIRE_SETCLOCK(CLOCK_SPEED)              Wire.setClock(CLOCK_SPEED)
#define WIRE_ONRECEIVE(FUNCTION_POINTER)        Wire.onReceive(FUNCTION_POINTER)    
#define WIRE_ONREQUEST(FUNCTION_POINTER)        Wire.onRequest(FUNCTION_POINTER)
#define WIRE_SETWIRETIMEOUT(TIME_OUT)           Wire.setWireTimeout(TIME_OUT)
#define WIRE_CLEARWIRETIMEOUTFLAG()             Wire.clearWireTimeoutFlag()
#define WIRE_GETWIRETIMEOUTFLAG()               Wire.getWireTimeoutFlag()

void  main__receive_event(i32 num_bytes);

#define _const_main__led_0 13

#define i2c__any()  WIRE_AVAILABLE()

#define i2c__as_master() WIRE_BEGIN()

#define i2c__as_slave(address) WIRE_BEGIN(address)

#define i2c__clear_timeout_flag() WIRE_CLEARWIRETIMEOUTFLAG()

#define i2c__end() WIRE_END()

#define i2c__on_receive(function_pointer) WIRE_ONRECEIVE(function_pointer)

#define i2c__on_request(function_pointer) WIRE_ONREQUEST(function_pointer)

#define i2c__read()  WIRE_READ()

#define i2c__read_timeout_flag()  WIRE_GETWIRETIMEOUTFLAG()

#define i2c__request_from(address, quantity) WIRE_REQUESTFROM(address, quantity)

#define i2c__setup_clock(clock_speed) WIRE_SETCLOCK(clock_speed)

#define i2c__setup_timeout(timeout) WIRE_SETWIRETIMEOUT(timeout)

#define i2c__start(address) WIRE_BEGINTRANSMISSION(address)

#define i2c__stop() WIRE_ENDTRANSMISSION()

#define i2c__write(data) WIRE_WRITE(data)

#define _const_pin__d0 0
#define _const_pin__d1 1
#define _const_pin__d2 2
#define _const_pin__d3 3
#define _const_pin__d4 4
#define _const_pin__d5 5
#define _const_pin__d6 6
#define _const_pin__d7 7
#define _const_pin__d8 8
#define _const_pin__d9 9
#define _const_pin__d10 10
#define _const_pin__d11 11
#define _const_pin__d12 12
#define _const_pin__d13 13
#define _const_pin__d14 14
#define _const_pin__d15 15
#define _const_pin__d16 16
#define _const_pin__d17 17
#define _const_pin__d18 18
#define _const_pin__d19 19
#define _const_pin__input 0
#define _const_pin__output 1
#define _const_pin__in_pullup 2

#define pin__high(name) digitalWrite(name, HIGH)

#define pin__low(name) digitalWrite(name, LOW)

#define pin__read(name)  digitalRead(name)

#define pin__setup(name, mode) pinMode(name, mode)

#define pin__write(name, val) digitalWrite(name, val)

#define time__sleep(ts) delay(ts * 1000)

#define time__sleep_ms(tms) delay(tms)

#define time__sleep_us(tus) delayMicroseconds(tus)

const i32 _const_main__led1 = (i32)(_const_pin__d13);
const i32 _const_main__led2 = (i32)(_const_pin__d12);
const i32 _const_main__led3 = (i32)(_const_pin__d8);

void setup() {
	pin__setup(_const_main__led1, _const_pin__output); 
	pin__setup(_const_main__led2, _const_pin__output); 
	pin__setup(_const_main__led3, _const_pin__output); 
	i2c__as_slave(0x23); 
	i2c__on_receive(main__receive_event); 
	while( true ) {
		pin__write(_const_main__led1, 0); 
		pin__write(_const_main__led2, 0); 
		pin__write(_const_main__led3, 0); 
		time__sleep_ms(1000); 
	} 
}

void loop(){
}

void  main__receive_event(i32 num_bytes) {
	for( int _ = 0; _ < num_bytes; _ ++ ) { 
		u8 data = (u8)(i2c__read());  
		switch (data) { 
			case 1: 
			{ 
				pin__write(_const_main__led1, 1);  
				break; 
			}  
			case 2: 
			{ 
				pin__write(_const_main__led2, 1);  
				break; 
			}  
			case 3: 
			{ 
				pin__write(_const_main__led3, 1);  
				break; 
			}  
			default: { 
				break; 
			}  
		};  
	} 
}
