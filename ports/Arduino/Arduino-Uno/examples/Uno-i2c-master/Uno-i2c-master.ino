// This Arduino code was automatically generated by Aixt Project
//     https://github.com/fermarsan/aixt
// Device = Arduino-Uno
// Board = Arduino Uno
// Backend = arduino

#include <Wire.h>
#include <stdio.h>
typedef int8_t i8;
typedef int16_t i16;
typedef int32_t i32;
typedef int64_t i64;
typedef int8_t isize;
typedef int32_t int_literal;
typedef uint8_t u8;
// typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;
typedef uint8_t usize;
typedef float f32;
typedef double f64;
typedef double float_literal;
typedef char rune;

#define _const_main__cpu_freq_mhz	_const_main__cpu_freq/1000000
#define _const_main__cpu_freq  16000000

// Project Name: Aixt, https://github.com/fermarsan/aixt.git
// Author: Juan Pablo Bernal - Daniela Mendoza Deantonio - Fernando Martinez Santa 
// Date: 2024

#define WIRE_BEGIN(...)                         Wire.begin(__VA_ARGS__)  
#define WIRE_END()                              Wire.end()
#define WIRE_REQUESTFROM(ADDRESS,QUANTITY)      Wire.requestFrom(ADDRESS,QUANTITY)
#define WIRE_BEGINTRANSMISSION(ADDRESS)         Wire.beginTransmission(ADDRESS)
#define WIRE_ENDTRANSMISSION()                  Wire.endTransmission()     
#define WIRE_WRITE(DATA)                        Wire.write(DATA)
#define WIRE_AVAILABLE()                        Wire.available()
#define WIRE_READ()                             Wire.read()
#define WIRE_SETCLOCK(CLOCK_SPEED)              Wire.setClock(CLOCK_SPEED)
#define WIRE_ONRECEIVE(FUNCTION_POINTER)        Wire.onReceive(FUNCTION_POINTER)    
#define WIRE_ONREQUEST(FUNCTION_POINTER)        Wire.onRequest(FUNCTION_POINTER)
#define WIRE_SETWIRETIMEOUT(TIME_OUT)           Wire.setWireTimeout(TIME_OUT)
#define WIRE_CLEARWIRETIMEOUTFLAG()             Wire.clearWireTimeoutFlag()
#define WIRE_GETWIRETIMEOUTFLAG()               Wire.getWireTimeoutFlag()

#define SERIAL_BEGIN(BAUD_RATE)     Serial.begin(BAUD_RATE)
#define SERIAL_WRITE(CHARACTER)     Serial.write(CHARACTER) 
#define SERIAL_READ()               Serial.read()
#define SERIAL_PRINT(MESSAGE)       Serial.print(MESSAGE)
#define SERIAL_PRINTLN(MESSAGE)     Serial.println(MESSAGE)
#define SERIAL_AVAILABLE()          Serial.available()    

char __temp_str[50];

#define _const_main__led_0 13

#define i2c__any()  WIRE_AVAILABLE()

#define i2c__as_master() WIRE_BEGIN()

#define i2c__as_slave(address) WIRE_BEGIN(address)

#define i2c__clear_timeout_flag() WIRE_CLEARWIRETIMEOUTFLAG()

#define i2c__end() WIRE_END()

#define i2c__on_receive(function_pointer) WIRE_ONRECEIVE(function_pointer)

#define i2c__on_request(function_pointer) WIRE_ONREQUEST(function_pointer)

#define i2c__read()  WIRE_READ()

#define i2c__read_timeout_flag()  WIRE_GETWIRETIMEOUTFLAG()

#define i2c__request_from(address, quantity) WIRE_REQUESTFROM(address, quantity)

#define i2c__setup_clock(clock_speed) WIRE_SETCLOCK(clock_speed)

#define i2c__setup_timeout(timeout) WIRE_SETWIRETIMEOUT(timeout)

#define i2c__start(address) WIRE_BEGINTRANSMISSION(address)

#define i2c__stop() WIRE_ENDTRANSMISSION()

#define i2c__write(data) WIRE_WRITE(data)

#define time__sleep(ts) delay(ts * 1000)

#define time__sleep_ms(tms) delay(tms)

#define time__sleep_us(tus) delayMicroseconds(tus)

#define uart__any()  SERIAL_AVAILABLE()

#define uart__print(message) SERIAL_PRINT(message)

#define uart__println(message) SERIAL_PRINTLN(message)

#define uart__read()  SERIAL_READ()

#define uart__setup(baud_rate) SERIAL_BEGIN(baud_rate)

#define uart__write(character) SERIAL_WRITE(character)

const u8 *_const_main__pins = (u8*)({(u8)(2), 3, 4, 5, 6});

void setup() {
	i2c__as_master(); 
	u8 estado = (u8)(0); 
	while( true ) {
		for( int __i_1 = 0; __i_1 < 5; __i_1 ++ ) {
			u8 pin = _const_main__pins[__i_1];
			i2c__start(1); 
			i2c__write(pin); 
			sprintf(__temp_str, "Enviando pin: %u", (unsigned int)pin);
			uart__print(__temp_str); 
			i2c__write(estado); 
			sprintf(__temp_str, "Enviando estado: %u", (unsigned int)estado);
			uart__print(__temp_str); 
			i2c__stop(); 
			time__sleep_ms(100); 
		} 
		if( estado == 0 ) {
			estado = (u8)((u8)(1)); 
		}
		else {
			estado = (u8)((u8)(0)); 
		}; 
		sprintf(__temp_str, "Cambiando estado a: %u", (unsigned int)estado);
		uart__print(__temp_str); 
	} 
}

void loop(){
}
