

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Sun May  4 14:32:42 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F83
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,space=0,delta=2
    12                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	functab,global,class=ENTRY,space=0,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x2E,2
    16     0000                     
    17                           ; Generated 05/12/2024 GMT
    18                           ; 
    19                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F83 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0008                     EEDATA          equ	8	;# 
    67     0009                     EEADR           equ	9	;# 
    68     000A                     PCLATH          equ	10	;# 
    69     000B                     INTCON          equ	11	;# 
    70     0081                     OPTION_REG      equ	129	;# 
    71     0085                     TRISA           equ	133	;# 
    72     0086                     TRISB           equ	134	;# 
    73     0088                     EECON1          equ	136	;# 
    74     0089                     EECON2          equ	137	;# 
    75     0000                     INDF            equ	0	;# 
    76     0001                     TMR0            equ	1	;# 
    77     0002                     PCL             equ	2	;# 
    78     0003                     STATUS          equ	3	;# 
    79     0004                     FSR             equ	4	;# 
    80     0005                     PORTA           equ	5	;# 
    81     0006                     PORTB           equ	6	;# 
    82     0008                     EEDATA          equ	8	;# 
    83     0009                     EEADR           equ	9	;# 
    84     000A                     PCLATH          equ	10	;# 
    85     000B                     INTCON          equ	11	;# 
    86     0081                     OPTION_REG      equ	129	;# 
    87     0085                     TRISA           equ	133	;# 
    88     0086                     TRISB           equ	134	;# 
    89     0088                     EECON1          equ	136	;# 
    90     0089                     EECON2          equ	137	;# 
    91                           
    92                           	psect	nvBANK0
    93     0012                     __pnvBANK0:
    94     0012                     _ptr_timer0_isr:
    95     0012                     	ds	1
    96     0005                     _PORTA          set	5
    97     0001                     _TMR0           set	1
    98     005D                     _T0IE           set	93
    99     005F                     _GIE            set	95
   100     005A                     _T0IF           set	90
   101     0081                     _OPTION_REG     set	129
   102     0085                     _TRISA          set	133
   103     040B                     _PSA            set	1035
   104     040D                     _T0CS           set	1037
   105                           
   106                           	psect	cinit
   107     000E                     start_initialization:	
   108                           ; #config settings
   109                           
   110     000E                     __initialization:
   111                           
   112                           ; Clear objects allocated to BANK0
   113     000E  1283               	bcf	3,5	;RP0=0, select bank0
   114     000F  0190               	clrf	__pbssBANK0& (0+127)
   115     0010  0191               	clrf	(__pbssBANK0+1)& (0+127)
   116     0011                     end_of_initialization:	
   117                           ;End of C runtime variable initialization code
   118                           
   119     0011                     __end_of__initialization:
   120     0011  0183               	clrf	3
   121     0012  281B               	ljmp	_main	;jump to C main() function
   122                           
   123                           	psect	bssBANK0
   124     0010                     __pbssBANK0:
   125     0010                     _int_flag:
   126     0010                     	ds	1
   127     0011                     _timer0__initial:
   128     0011                     	ds	1
   129                           
   130                           	psect	cstackCOMMON
   131     0000                     __pcstackCOMMON:
   132     0000                     ??_main__blinking:
   133     0000                     ??_main:	
   134                           ; 1 bytes @ 0x0
   135                           
   136                           
   137                           	psect	cstackBANK0
   138     000C                     __pcstackBANK0:	
   139                           ; 1 bytes @ 0x0
   140                           
   141     000C                     ?_Global_ISR:
   142     000C                     ?_main__blinking:	
   143                           ; 1 bytes @ 0x0
   144                           
   145     000C                     ?_main:	
   146                           ; 1 bytes @ 0x0
   147                           
   148     000C                     ??_Global_ISR:	
   149                           ; 1 bytes @ 0x0
   150                           
   151                           
   152                           ; 1 bytes @ 0x0
   153     000C                     	ds	3
   154     000F                     main@count:
   155                           
   156                           ; 1 bytes @ 0x3
   157     000F                     	ds	1
   158                           
   159                           	psect	maintext
   160     001B                     __pmaintext:	
   161 ;;
   162 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   163 ;;
   164 ;; *************** function _main *****************
   165 ;; Defined at:
   166 ;;		line 201 in file "main.c"
   167 ;; Parameters:    Size  Location     Type
   168 ;;		None
   169 ;; Auto vars:     Size  Location     Type
   170 ;;  count           1    3[BANK0 ] unsigned char 
   171 ;; Return value:  Size  Location     Type
   172 ;;                  1    wreg      void 
   173 ;; Registers used:
   174 ;;		wreg, status,2, status,0
   175 ;; Tracked objects:
   176 ;;		On entry : B00/0
   177 ;;		On exit  : 0/0
   178 ;;		Unchanged: 0/0
   179 ;; Data sizes:     COMMON   BANK0
   180 ;;      Params:         0       0
   181 ;;      Locals:         0       1
   182 ;;      Temps:          0       0
   183 ;;      Totals:         0       1
   184 ;;Total ram usage:        1 bytes
   185 ;; Hardware stack levels required when called: 2
   186 ;; This function calls:
   187 ;;		Nothing
   188 ;; This function is called by:
   189 ;;		Startup code after reset
   190 ;; This function uses a non-reentrant model
   191 ;;
   192                           
   193     001B                     _main:	
   194                           ;psect for function _main
   195                           
   196     001B                     l685:	
   197                           ;incstack = 0
   198                           ; Regs used in _main: [wreg+status,2+status,0]
   199                           
   200                           
   201                           ;main.c: 202:  ptr_timer0_isr = main__blinking;
   202     001B  3001               	movlw	(low (fp__main__blinking-i1fpbase))& (0+255)
   203     001C  1283               	bcf	3,5	;RP0=0, select bank0
   204     001D  0092               	movwf	_ptr_timer0_isr
   205     001E                     l687:
   206                           
   207                           ;main.c: 203:  u8 count = (u8)(0);
   208     001E  018F               	clrf	main@count
   209     001F                     l691:	
   210                           ;main.c: 204:  if( 0 == 1 ) { *(&TRISA + (23 >> 3)) |= (0x01 << (23 - ((23 >> 3) << 3)))
      +                          ; } else { *(&TRISA + (23 >> 3)) &= ~(0x01 << (23 - ((23 >> 3) << 3))); };;
   211                           
   212     001F  307F               	movlw	127
   213     0020  1683               	bsf	3,5	;RP0=1, select bank1
   214     0021  0587               	andwf	7,f	;volatile
   215     0022                     l693:
   216                           
   217                           ;main.c: 205:  T0CS = 0; if( 10000 <= (u32)(1024 / (u8)(10000000/1000000)) ) { PSA = 1; 
      +                          timer0__initial = (u8)((u8)(256 - (u16)(10000 >> 2) * (u16)(10000000/1000000))); } else 
      +                          { PSA = 0; OPTION_REG &= 0b11111000; if( 10000 <= (u32)(2048 / (u8)(10000000/1000000)) )
      +                           { OPTION_REG |= 0b000; timer0__initial = (u8)((u8)(256 - (u16)(10000 >> 3) * (u16)(1000
      +                          0000/1000000))); } else if( 10000 <= (u32)(4096 / (u8)(10000000/1000000)) ) { OPTION_REG
      +                           |= 0b001; timer0__initial = (u8)((u8)(256 - (u16)(10000 >> 4) * (u16)(10000000/1000000)
      +                          )); } else if( 10000 <= (u32)(8192 / (u8)(10000000/1000000)) ) { OPTION_REG |= 0b010; ti
      +                          mer0__initial = (u8)((u8)(256 - (u16)(10000 >> 5) * (u16)(10000000/1000000))); } else if
      +                          ( 10000 <= (u32)(16384 / (u8)(10000000/1000000)) ) { OPTION_REG |= 0b011; timer0__initia
      +                          l = (u8)((u8)(256 - (u16)(10000 >> 6) * (u16)(10000000/1000000))); } else if( 10000 <= (
      +                          u32)(32768 / (u8)(10000000/1000000)) ) { OPTION_REG |= 0b100; timer0__initial = (u8)((u8
      +                          )(256 - (u16)(10000 >> 7) * (u16)(10000000/1000000))); } else if( 10000 <= (u32)(65536 /
      +                           (u8)(10000000/1000000)) ) { OPTION_REG |= 0b101; timer0__initial = (u8)((u8)(256 - (u16
      +                          )(10000 >> 8) * (u16)(10000000/1000000))); } else if( 10000 <= (u32)(131072 / (u8)(10000
      +                          000/1000000)) ) { OPTION_REG |= 0b110; timer0__initial = (u8)((u8)(256 - (u16)(10000 >> 
      +                          9) * (u16)(10000000/1000000))); } else { OPTION_REG |= 0b111; timer0__initial = (u8)((u8
      +                          )(256 - (u16)(10000 >> 10) * (u16)(10000000/1000000))); }; }; TMR0 = (u8)(timer0__initia
      +                          l);;
   218     0022  1281               	bcf	1,5	;volatile
   219     0023                     l40:
   220     0023  1181               	bcf	1,3	;volatile
   221     0024                     l697:
   222     0024  30F8               	movlw	248
   223     0025  0581               	andwf	1,f	;volatile
   224     0026                     l717:
   225     0026  3006               	movlw	6
   226     0027  0481               	iorwf	1,f	;volatile
   227     0028                     l719:
   228     0028  3042               	movlw	66
   229     0029  1283               	bcf	3,5	;RP0=0, select bank0
   230     002A  0091               	movwf	_timer0__initial
   231     002B                     l725:
   232     002B  0811               	movf	_timer0__initial,w
   233     002C  0081               	movwf	1	;volatile
   234     002D                     l727:
   235                           
   236                           ;main.c: 206:  *(&PORTA + (23 >> 3)) &= ~(0x01 << (23 - ((23 >> 3) << 3)));
   237     002D  307F               	movlw	127
   238     002E  0587               	andwf	7,f	;volatile
   239     002F                     l729:
   240                           
   241                           ;main.c: 207:  GIE = 1; T0IE = 1;;
   242     002F  178B               	bsf	11,7	;volatile
   243     0030                     l731:
   244     0030  168B               	bsf	11,5	;volatile
   245     0031                     l733:
   246                           
   247                           ;main.c: 209:   if( int_flag ) {
   248     0031  0810               	movf	_int_flag,w
   249     0032  1903               	btfsc	3,2
   250     0033  2835               	goto	u51
   251     0034  2836               	goto	u50
   252     0035                     u51:
   253     0035  2831               	goto	l733
   254     0036                     u50:
   255     0036                     l735:
   256                           
   257                           ;main.c: 210:    count++;
   258     0036  3001               	movlw	1
   259     0037  078F               	addwf	main@count,f
   260     0038                     l737:
   261                           
   262                           ;main.c: 211:    if( count >= 20 ) {
   263     0038  3014               	movlw	20
   264     0039  020F               	subwf	main@count,w
   265     003A  1C03               	skipc
   266     003B  283D               	goto	u61
   267     003C  283E               	goto	u60
   268     003D                     u61:
   269     003D  2841               	goto	l743
   270     003E                     u60:
   271     003E                     l739:
   272                           
   273                           ;main.c: 212:     *(&PORTA + (23 >> 3)) ^= 0x01 << (23 - ((23 >> 3) << 3));
   274     003E  3080               	movlw	128
   275     003F  0687               	xorwf	7,f	;volatile
   276     0040                     l741:
   277                           
   278                           ;main.c: 213:     count = (u8)(0);
   279     0040  018F               	clrf	main@count
   280     0041                     l743:
   281                           
   282                           ;main.c: 215:    int_flag = (_Bool)(0);
   283     0041  0190               	clrf	_int_flag
   284     0042  2831               	goto	l733
   285     0043  280D               	ljmp	start
   286     0044                     __end_of_main:
   287                           
   288                           	psect	text1
   289     0044                     __ptext1:	
   290 ;; *************** function _Global_ISR *****************
   291 ;; Defined at:
   292 ;;		line 48 in file "main.c"
   293 ;; Parameters:    Size  Location     Type
   294 ;;		None
   295 ;; Auto vars:     Size  Location     Type
   296 ;;		None
   297 ;; Return value:  Size  Location     Type
   298 ;;                  1    wreg      void 
   299 ;; Registers used:
   300 ;;		wreg, status,2, status,0, pclath, cstack
   301 ;; Tracked objects:
   302 ;;		On entry : 0/0
   303 ;;		On exit  : 0/0
   304 ;;		Unchanged: 0/0
   305 ;; Data sizes:     COMMON   BANK0
   306 ;;      Params:         0       0
   307 ;;      Locals:         0       0
   308 ;;      Temps:          0       3
   309 ;;      Totals:         0       3
   310 ;;Total ram usage:        3 bytes
   311 ;; Hardware stack levels used: 1
   312 ;; Hardware stack levels required when called: 1
   313 ;; This function calls:
   314 ;;		NULL
   315 ;;		_main__blinking
   316 ;; This function is called by:
   317 ;;		Interrupt level 1
   318 ;; This function uses a non-reentrant model
   319 ;;
   320                           
   321     0044                     _Global_ISR:	
   322                           ;psect for function _Global_ISR
   323                           
   324     0044                     i1l679:
   325                           
   326                           ;main.c: 57:  if(T0IF == 1) {
   327     0044  1D0B               	btfss	11,2	;volatile
   328     0045  2847               	goto	u4_21
   329     0046  2848               	goto	u4_20
   330     0047                     u4_21:
   331     0047  284B               	goto	i1l26
   332     0048                     u4_20:
   333     0048                     i1l681:
   334                           
   335                           ;main.c: 58:   ptr_timer0_isr();
   336     0048  0812               	movf	_ptr_timer0_isr,w
   337     0049  2014               	fcall	i1fptable
   338     004A                     i1l683:
   339                           
   340                           ;main.c: 59:   T0IF = 0;
   341     004A  110B               	bcf	11,2	;volatile
   342     004B                     i1l26:
   343     004B  1283               	bcf	3,5	;RP0=0, select bank0
   344     004C  080E               	movf	??_Global_ISR+2,w
   345     004D  080D               	movf	??_Global_ISR+1,w
   346     004E  008A               	movwf	10
   347     004F  0E0C               	swapf	??_Global_ISR,w
   348     0050  0083               	movwf	3
   349     0051  0EAE               	swapf	btemp,f
   350     0052  0E2E               	swapf	btemp,w
   351     0053  0009               	retfie
   352     0054                     __end_of_Global_ISR:
   353                           
   354                           	psect	intentry
   355     0004                     __pintentry:	
   356                           ;incstack = 0
   357                           ; Regs used in _Global_ISR: [wreg+status,2+status,0+pclath+cstack]
   358                           
   359     0004                     interrupt_function:
   360     002E                     saved_w         set	btemp
   361     0004  00AE               	movwf	btemp
   362     0005  0E03               	swapf	3,w
   363     0006  1283               	bcf	3,5	;RP0=0, select bank0
   364     0007  008C               	movwf	??_Global_ISR
   365     0008  080A               	movf	10,w
   366     0009  008D               	movwf	??_Global_ISR+1
   367     000A  082F               	movf	btemp+1,w
   368     000B  008E               	movwf	??_Global_ISR+2
   369     000C  2844               	ljmp	_Global_ISR
   370                           
   371                           	psect	text2
   372     0054                     __ptext2:	
   373 ;; *************** function _main__blinking *****************
   374 ;; Defined at:
   375 ;;		line 196 in file "main.c"
   376 ;; Parameters:    Size  Location     Type
   377 ;;		None
   378 ;; Auto vars:     Size  Location     Type
   379 ;;		None
   380 ;; Return value:  Size  Location     Type
   381 ;;                  1    wreg      void 
   382 ;; Registers used:
   383 ;;		wreg
   384 ;; Tracked objects:
   385 ;;		On entry : 0/0
   386 ;;		On exit  : 0/0
   387 ;;		Unchanged: 0/0
   388 ;; Data sizes:     COMMON   BANK0
   389 ;;      Params:         0       0
   390 ;;      Locals:         0       0
   391 ;;      Temps:          0       0
   392 ;;      Totals:         0       0
   393 ;;Total ram usage:        0 bytes
   394 ;; Hardware stack levels used: 1
   395 ;; This function calls:
   396 ;;		Nothing
   397 ;; This function is called by:
   398 ;;		_main
   399 ;;		_Global_ISR
   400 ;; This function uses a non-reentrant model
   401 ;;
   402                           
   403     0054                     _main__blinking:	
   404                           ;psect for function _main__blinking
   405                           
   406     0054                     i1l675:	
   407                           ;incstack = 0
   408                           ; Regs used in _main__blinking: [wreg]
   409                           
   410                           
   411                           ;main.c: 197:  TMR0 = (u8)(timer0__initial);
   412     0054  1283               	bcf	3,5	;RP0=0, select bank0
   413     0055  0811               	movf	_timer0__initial,w
   414     0056  0081               	movwf	1	;volatile
   415     0057                     i1l677:
   416                           
   417                           ;main.c: 198:  int_flag = (_Bool)(1);
   418     0057  3001               	movlw	1
   419     0058  0090               	movwf	_int_flag
   420     0059                     i1l33:
   421     0059  0008               	return
   422     005A                     __end_of_main__blinking:
   423     0000                     ___latbits      equ	0
   424     0000                     fptotal         equ	0
   425     0002                     i1fptotal       equ	2
   426                           
   427                           	psect	functab
   428     0013                     __pfunctab:
   429     0000                     fpbase          equ	0
   430     0013                     fptable:
   431     0013  2813               	goto	fptable	;no entries
   432     0014                     __i1fptable:
   433     0014                     i1fptable:
   434     0014  00AF               	movwf	(btemp+1)& (0+127)
   435     0015  3000               	movlw	high i1fptable
   436     0016  008A               	movwf	10
   437     0017  082F               	movf	(btemp+1)& (0+127),w
   438     0018  0782               	addwf	2,f
   439     0019                     i1fpbase:
   440     0019  2819               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
   441     001A                     fp__main__blinking:
   442     001A  2854               	ljmp	_main__blinking
   443     001B                     __end_of__i1fptable:
   444     0007                     __size_of__i1fptable equ	__end_of__i1fptable-__i1fptable
   445     002E                     btemp           set	46	;btemp
   446     002E                     wtemp0          set	46
   447                           
   448                           	psect	config
   449                           
   450                           ;Config register CONFIG @ 0x2007
   451                           ;	Oscillator Selection bits
   452                           ;	FOSC = HS, HS oscillator
   453                           ;	Watchdog Timer
   454                           ;	WDTE = OFF, WDT disabled
   455                           ;	Power-up Timer Enable bit
   456                           ;	PWRTE = ON, Power-up Timer is enabled
   457                           ;	Code Protection bit
   458                           ;	CP = OFF, Code protection disabled
   459     2007                     	org	8199
   460     2007  3FF2               	dw	16370

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            34      4       7

Pointer List with Targets:

    ptr_timer0_isr	PTR FTN()void  size(1) Largest target is 1
		 -> main__blinking(), NULL(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Global_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Global_ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      25
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _Global_ISR                                           3     3      0       0
                                              0 BANK0      3     3      0
                                NULL *
                     _main__blinking *
 ---------------------------------------------------------------------------------
 (2) _main__blinking                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _Global_ISR (ROOT)
   NULL(Fake) *
   _main__blinking *

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON            0      0       0      0.0%
BITBANK0            34      0       0      0.0%
COMMON               0      0       0      0.0%
BANK0               34      4       7     20.6%
STACK                0      0       0      0.0%
DATA                 0      0       7      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Sun May  4 14:32:42 2025

                      pc 0002                       l40 0023                       u50 0036  
                     u51 0035                       u60 003E                       u61 003D  
                    l731 0030                      l741 0040                      l733 0031  
                    l725 002B                      l717 0026                      l743 0041  
                    l735 0036                      l727 002D                      l719 0028  
                    l737 0038                      l729 002F                      l739 003E  
                    l691 001F                      l693 0022                      l685 001B  
                    l687 001E                      l697 0024                      _GIE 005F  
                    _PSA 040B                     _T0IE 005D                     _T0IF 005A  
                   _T0CS 040D                     i1l33 0059                     i1l26 004B  
                   _TMR0 0001                     u4_20 0048                     u4_21 0047  
                   _main 001B                     btemp 002E                     start 000D  
        _timer0__initial 0011           _ptr_timer0_isr 0012                    ?_main 000C  
                  i1l681 0048                    i1l675 0054                    i1l683 004A  
                  i1l677 0057                    i1l679 0044                    _PORTA 0005  
                  _TRISA 0085               _Global_ISR 0044                    fpbase 0000  
                  pclath 000A           _main__blinking 0054                    status 0003  
                  wtemp0 002E          __initialization 000E             __end_of_main 0044  
                 ??_main 0000   __end_of_main__blinking 005A               __i1fptable 0014  
                 fptable 0013                   fptotal 0000                   saved_w 002E  
            ?_Global_ISR 000C          ?_main__blinking 000C  __end_of__initialization 0011  
         __pcstackCOMMON 0000               __pbssBANK0 0010               __pmaintext 001B  
             __pintentry 0004                  i1fpbase 0019                  __ptext1 0044  
                __ptext2 0054      __size_of__i1fptable 0007     end_of_initialization 0011  
       ??_main__blinking 0000             ??_Global_ISR 000C       __end_of_Global_ISR 0054  
    start_initialization 000E       __end_of__i1fptable 001B                ___latbits 0000  
          __pcstackBANK0 000C                __pnvBANK0 0012                __pfunctab 0013  
      interrupt_function 0004                main@count 000F                 i1fptable 0014  
               i1fptotal 0002                 _int_flag 0010                 intlevel1 0013  
      fp__main__blinking 001A               _OPTION_REG 0081  
