// This C code was automatically generated by Aixt Project
//     https://github.com/fermarsan/aixt
// Device = PIC16F83
// Board = ---
// Backend = c

#include <xc.h>
#include <stdint.h>
#include <stdbool.h>
typedef int8_t i8;
typedef int16_t i16;
typedef int32_t i32;
// typedef NOT SUPPORTED i64;
typedef int8_t isize;
typedef int32_t int_literal;
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
// typedef NOT SUPPORTED u64;
typedef uint8_t usize;
typedef float f32;
// typedef NOT SUPPORTED f64;
typedef float float_literal;
typedef char rune;

#define _const_main__cpu_freq_mhz	_const_main__cpu_freq/1000000
#define _const_main__cpu_freq  10000000

#define _XTAL_FREQ _const_main__cpu_freq

#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer (WDT disabled)
#pragma config PWRTE = ON       // Power-up Timer Enable bit (Power-up Timer is disabled)
#pragma config CP = OFF         // Code Protection bit (Code protection disabled)

#if defined(TIMER0_IRQ_IN_USE) || defined(EXT_IRQ_IN_USE)   // if any interrupt source is activated

#ifdef EXT_IRQ_IN_USE    
void (*ptr_ext_isr)(void);      // Interrupt Service Routine pointer
#endif  // EXT_IRQ_IN_USE 

#ifdef TIMER0_IRQ_IN_USE    
void (*ptr_timer0_isr)(void);   // Interrupt Service Routine pointer
#endif  // TIMER0_IRQ_IN_USE 

void __interrupt() Global_ISR() {
	#ifdef EXT_IRQ_IN_USE    
	if(INTF == 1) {
		ptr_ext_isr();
		INTF = 0;
	}
	#endif  // EXT_IRQ_IN_USE 
	
	#ifdef TIMER0_IRQ_IN_USE    
	if(T0IF == 1) {
		ptr_timer0_isr();
		T0IF = 0;
	}
	#endif  // TIMER0_IRQ_IN_USE 
}

#endif  // defined(TIMER0_IRQ_IN_USE) || defined(EXT_IRQ_IN_USE)

 void main(void) {
}

