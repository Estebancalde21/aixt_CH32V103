

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Feb 19 18:34:11 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F84
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	intentry,global,class=CODE,space=0,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	functab,global,class=ENTRY,space=0,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x4E,2
    15     0000                     
    16                           ; Generated 05/12/2024 GMT
    17                           ; 
    18                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F84 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50     0004                     fsr             equ	4
    51     0004                     fsr0            equ	4
    52     0000                     indf            equ	0
    53     0000                     indf0           equ	0
    54     0002                     pc              equ	2
    55     0002                     pcl             equ	2
    56     000A                     pclath          equ	10
    57     0003                     status          equ	3
    58     0000                     INDF            equ	0	;# 
    59     0001                     TMR0            equ	1	;# 
    60     0002                     PCL             equ	2	;# 
    61     0003                     STATUS          equ	3	;# 
    62     0004                     FSR             equ	4	;# 
    63     0005                     PORTA           equ	5	;# 
    64     0006                     PORTB           equ	6	;# 
    65     0008                     EEDATA          equ	8	;# 
    66     0009                     EEADR           equ	9	;# 
    67     000A                     PCLATH          equ	10	;# 
    68     000B                     INTCON          equ	11	;# 
    69     0081                     OPTION_REG      equ	129	;# 
    70     0085                     TRISA           equ	133	;# 
    71     0086                     TRISB           equ	134	;# 
    72     0088                     EECON1          equ	136	;# 
    73     0089                     EECON2          equ	137	;# 
    74     0000                     INDF            equ	0	;# 
    75     0001                     TMR0            equ	1	;# 
    76     0002                     PCL             equ	2	;# 
    77     0003                     STATUS          equ	3	;# 
    78     0004                     FSR             equ	4	;# 
    79     0005                     PORTA           equ	5	;# 
    80     0006                     PORTB           equ	6	;# 
    81     0008                     EEDATA          equ	8	;# 
    82     0009                     EEADR           equ	9	;# 
    83     000A                     PCLATH          equ	10	;# 
    84     000B                     INTCON          equ	11	;# 
    85     0081                     OPTION_REG      equ	129	;# 
    86     0085                     TRISA           equ	133	;# 
    87     0086                     TRISB           equ	134	;# 
    88     0088                     EECON1          equ	136	;# 
    89     0089                     EECON2          equ	137	;# 
    90                           
    91                           	psect	nvBANK0
    92     000F                     __pnvBANK0:
    93     000F                     _ptr_ext_isr:
    94     000F                     	ds	1
    95     0005                     _PORTA          set	5
    96     005C                     _INTE           set	92
    97     005F                     _GIE            set	95
    98     0059                     _INTF           set	89
    99     0085                     _TRISA          set	133
   100     040E                     _INTEDG         set	1038
   101                           
   102                           	psect	cinit
   103     000E                     start_initialization:	
   104                           ; #config settings
   105                           
   106     000E                     __initialization:
   107     000E                     end_of_initialization:	
   108                           ;End of C runtime variable initialization code
   109                           
   110     000E                     __end_of__initialization:
   111     000E  0183               	clrf	3
   112     000F  2818               	ljmp	_main	;jump to C main() function
   113                           
   114                           	psect	cstackCOMMON
   115     0000                     __pcstackCOMMON:
   116     0000                     ??_main__toggle_led:
   117     0000                     ??_main:	
   118                           ; 1 bytes @ 0x0
   119                           
   120                           
   121                           	psect	cstackBANK0
   122     000C                     __pcstackBANK0:	
   123                           ; 1 bytes @ 0x0
   124                           
   125     000C                     ?_Global_ISR:
   126     000C                     ?_main__toggle_led:	
   127                           ; 1 bytes @ 0x0
   128                           
   129     000C                     ?_main:	
   130                           ; 1 bytes @ 0x0
   131                           
   132     000C                     ??_Global_ISR:	
   133                           ; 1 bytes @ 0x0
   134                           
   135                           
   136                           ; 1 bytes @ 0x0
   137     000C                     	ds	3
   138                           
   139                           	psect	maintext
   140     0018                     __pmaintext:	
   141 ;;
   142 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   143 ;;
   144 ;; *************** function _main *****************
   145 ;; Defined at:
   146 ;;		line 148 in file "main.c"
   147 ;; Parameters:    Size  Location     Type
   148 ;;		None
   149 ;; Auto vars:     Size  Location     Type
   150 ;;		None
   151 ;; Return value:  Size  Location     Type
   152 ;;                  1    wreg      void 
   153 ;; Registers used:
   154 ;;		wreg, status,2, status,0
   155 ;; Tracked objects:
   156 ;;		On entry : B00/0
   157 ;;		On exit  : 0/0
   158 ;;		Unchanged: 0/0
   159 ;; Data sizes:     COMMON   BANK0
   160 ;;      Params:         0       0
   161 ;;      Locals:         0       0
   162 ;;      Temps:          0       0
   163 ;;      Totals:         0       0
   164 ;;Total ram usage:        0 bytes
   165 ;; Hardware stack levels required when called: 2
   166 ;; This function calls:
   167 ;;		Nothing
   168 ;; This function is called by:
   169 ;;		Startup code after reset
   170 ;; This function uses a non-reentrant model
   171 ;;
   172                           
   173     0018                     _main:	
   174                           ;psect for function _main
   175                           
   176     0018                     l611:	
   177                           ;incstack = 0
   178                           ; Regs used in _main: [wreg+status,2+status,0]
   179                           
   180                           
   181                           ;main.c: 149:  ptr_ext_isr = main__toggle_led;
   182     0018  3001               	movlw	(low (fp__main__toggle_led-i1fpbase))& (0+255)
   183     0019  1283               	bcf	3,5	;RP0=0, select bank0
   184     001A  008F               	movwf	_ptr_ext_isr
   185     001B                     l615:	
   186                           ;main.c: 150:  if( 0 == 1 ) { *(&TRISA + (12 >> 3)) |= (0x01 << (12 - ((12 >> 3) << 3)))
      +                          ; } else { *(&TRISA + (12 >> 3)) &= ~(0x01 << (12 - ((12 >> 3) << 3))); };;
   187                           
   188     001B  30EF               	movlw	239
   189     001C  1683               	bsf	3,5	;RP0=1, select bank1
   190     001D  0586               	andwf	6,f	;volatile
   191     001E                     l29:
   192                           
   193                           ;main.c: 152:  if( 1 == 1 ) { *(&TRISA + (8 >> 3)) |= (0x01 << (8 - ((8 >> 3) << 3))); }
      +                           else { *(&TRISA + (8 >> 3)) &= ~(0x01 << (8 - ((8 >> 3) << 3))); };;
   194     001E  30EF               	movlw	239
   195     001F  1283               	bcf	3,5	;RP0=0, select bank0
   196     0020  0586               	andwf	6,f	;volatile
   197     0021                     l617:
   198     0021  1683               	bsf	3,5	;RP0=1, select bank1
   199     0022  1406               	bsf	6,0	;volatile
   200     0023                     l621:
   201                           
   202                           ;main.c: 153:  INTEDG = 0;
   203     0023  1301               	bcf	1,6	;volatile
   204     0024                     l623:
   205                           
   206                           ;main.c: 154:  GIE = 1; INTE = 1;;
   207     0024  178B               	bsf	11,7	;volatile
   208     0025                     l625:
   209     0025  160B               	bsf	11,4	;volatile
   210     0026                     l32:	
   211                           ;main.c: 155:  while( 1 ) {
   212                           
   213     0026                     l33:	
   214                           ;main.c: 156:  }
   215                           
   216     0026  2826               	goto	l32
   217     0027  280D               	ljmp	start
   218     0028                     __end_of_main:
   219                           
   220                           	psect	text1
   221     0028                     __ptext1:	
   222 ;; *************** function _Global_ISR *****************
   223 ;; Defined at:
   224 ;;		line 48 in file "main.c"
   225 ;; Parameters:    Size  Location     Type
   226 ;;		None
   227 ;; Auto vars:     Size  Location     Type
   228 ;;		None
   229 ;; Return value:  Size  Location     Type
   230 ;;                  1    wreg      void 
   231 ;; Registers used:
   232 ;;		wreg, status,2, status,0, pclath, cstack
   233 ;; Tracked objects:
   234 ;;		On entry : 0/0
   235 ;;		On exit  : 0/0
   236 ;;		Unchanged: 0/0
   237 ;; Data sizes:     COMMON   BANK0
   238 ;;      Params:         0       0
   239 ;;      Locals:         0       0
   240 ;;      Temps:          0       3
   241 ;;      Totals:         0       3
   242 ;;Total ram usage:        3 bytes
   243 ;; Hardware stack levels used: 1
   244 ;; Hardware stack levels required when called: 1
   245 ;; This function calls:
   246 ;;		NULL
   247 ;;		_main__toggle_led
   248 ;; This function is called by:
   249 ;;		Interrupt level 1
   250 ;; This function uses a non-reentrant model
   251 ;;
   252                           
   253     0028                     _Global_ISR:	
   254                           ;psect for function _Global_ISR
   255                           
   256     0028                     i1l605:
   257     0028  1C8B               	btfss	11,1	;volatile
   258     0029  282B               	goto	u2_21
   259     002A  282C               	goto	u2_20
   260     002B                     u2_21:
   261     002B  282F               	goto	i1l20
   262     002C                     u2_20:
   263     002C                     i1l607:
   264     002C  080F               	movf	_ptr_ext_isr,w
   265     002D  2011               	fcall	i1fptable
   266     002E                     i1l609:
   267     002E  108B               	bcf	11,1	;volatile
   268     002F                     i1l20:
   269     002F  1283               	bcf	3,5	;RP0=0, select bank0
   270     0030  080E               	movf	??_Global_ISR+2,w
   271     0031  080D               	movf	??_Global_ISR+1,w
   272     0032  008A               	movwf	10
   273     0033  0E0C               	swapf	??_Global_ISR,w
   274     0034  0083               	movwf	3
   275     0035  0ECE               	swapf	btemp,f
   276     0036  0E4E               	swapf	btemp,w
   277     0037  0009               	retfie
   278     0038                     __end_of_Global_ISR:
   279                           
   280                           	psect	intentry
   281     0004                     __pintentry:	
   282                           ;incstack = 0
   283                           ; Regs used in _Global_ISR: [wreg+status,2+status,0+pclath+cstack]
   284                           
   285     0004                     interrupt_function:
   286     004E                     saved_w         set	btemp
   287     0004  00CE               	movwf	btemp
   288     0005  0E03               	swapf	3,w
   289     0006  1283               	bcf	3,5	;RP0=0, select bank0
   290     0007  008C               	movwf	??_Global_ISR
   291     0008  080A               	movf	10,w
   292     0009  008D               	movwf	??_Global_ISR+1
   293     000A  084F               	movf	btemp+1,w
   294     000B  008E               	movwf	??_Global_ISR+2
   295     000C  2828               	ljmp	_Global_ISR
   296                           
   297                           	psect	text2
   298     0038                     __ptext2:	
   299 ;; *************** function _main__toggle_led *****************
   300 ;; Defined at:
   301 ;;		line 144 in file "main.c"
   302 ;; Parameters:    Size  Location     Type
   303 ;;		None
   304 ;; Auto vars:     Size  Location     Type
   305 ;;		None
   306 ;; Return value:  Size  Location     Type
   307 ;;                  1    wreg      void 
   308 ;; Registers used:
   309 ;;		wreg, status,2, status,0
   310 ;; Tracked objects:
   311 ;;		On entry : 0/0
   312 ;;		On exit  : 0/0
   313 ;;		Unchanged: 0/0
   314 ;; Data sizes:     COMMON   BANK0
   315 ;;      Params:         0       0
   316 ;;      Locals:         0       0
   317 ;;      Temps:          0       0
   318 ;;      Totals:         0       0
   319 ;;Total ram usage:        0 bytes
   320 ;; Hardware stack levels used: 1
   321 ;; This function calls:
   322 ;;		Nothing
   323 ;; This function is called by:
   324 ;;		_main
   325 ;;		_Global_ISR
   326 ;; This function uses a non-reentrant model
   327 ;;
   328                           
   329     0038                     _main__toggle_led:	
   330                           ;psect for function _main__toggle_led
   331                           
   332     0038                     i1l603:	
   333                           ;incstack = 0
   334                           ; Regs used in _main__toggle_led: [wreg+status,2+status,0]
   335                           
   336                           
   337                           ;main.c: 145:  *(&PORTA + (12 >> 3)) ^= 0x01 << (12 - ((12 >> 3) << 3));
   338     0038  3010               	movlw	16
   339     0039  1283               	bcf	3,5	;RP0=0, select bank0
   340     003A  0686               	xorwf	6,f	;volatile
   341     003B                     i1l23:
   342     003B  0008               	return
   343     003C                     __end_of_main__toggle_led:
   344     0000                     ___latbits      equ	0
   345     0000                     fptotal         equ	0
   346     0002                     i1fptotal       equ	2
   347                           
   348                           	psect	functab
   349     0010                     __pfunctab:
   350     0000                     fpbase          equ	0
   351     0010                     fptable:
   352     0010  2810               	goto	fptable	;no entries
   353     0011                     __i1fptable:
   354     0011                     i1fptable:
   355     0011  00CF               	movwf	(btemp+1)& (0+127)
   356     0012  3000               	movlw	high i1fptable
   357     0013  008A               	movwf	10
   358     0014  084F               	movf	(btemp+1)& (0+127),w
   359     0015  0782               	addwf	2,f
   360     0016                     i1fpbase:
   361     0016  2816               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
   362     0017                     fp__main__toggle_led:
   363     0017  2838               	ljmp	_main__toggle_led
   364     0018                     __end_of__i1fptable:
   365     0007                     __size_of__i1fptable equ	__end_of__i1fptable-__i1fptable
   366     004E                     btemp           set	78	;btemp
   367     004E                     wtemp0          set	78
   368                           
   369                           	psect	config
   370                           
   371                           ;Config register CONFIG @ 0x2007
   372                           ;	Oscillator Selection bits
   373                           ;	FOSC = HS, HS oscillator
   374                           ;	Watchdog Timer
   375                           ;	WDTE = OFF, WDT disabled
   376                           ;	Power-up Timer Enable bit
   377                           ;	PWRTE = ON, Power-up Timer is enabled
   378                           ;	Code Protection bit
   379                           ;	CP = OFF, Code protection disabled
   380     2007                     	org	8199
   381     2007  3FF2               	dw	16370

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66      3       4

Pointer List with Targets:

    ptr_ext_isr	PTR FTN()void  size(1) Largest target is 1
		 -> main__toggle_led(), NULL(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Global_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Global_ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _Global_ISR                                           3     3      0       0
                                              0 BANK0      3     3      0
                                NULL *
                   _main__toggle_led *
 ---------------------------------------------------------------------------------
 (2) _main__toggle_led                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _Global_ISR (ROOT)
   NULL(Fake) *
   _main__toggle_led *

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON            0      0       0      0.0%
BITBANK0            66      0       0      0.0%
COMMON               0      0       0      0.0%
BANK0               66      3       4      6.1%
STACK                0      0       0      0.0%
DATA                 0      0       4      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Feb 19 18:34:11 2025

             _ptr_ext_isr 000F                         pc 0002                        l32 0026  
                      l33 0026                        l29 001E                       l611 0018  
                     l621 0023                       l623 0024                       l615 001B  
                     l625 0025                       l617 0021                       _GIE 005F  
                    i1l20 002F                      _INTE 005C                      _INTF 0059  
                    i1l23 003B                      u2_20 002C                      u2_21 002B  
                    _main 0018                      btemp 004E                      start 000D  
                   ?_main 000C                     i1l603 0038                     i1l605 0028  
                   i1l607 002C                     i1l609 002E                     _PORTA 0005  
                   _TRISA 0085                _Global_ISR 0028                     fpbase 0000  
                   pclath 000A         ?_main__toggle_led 000C                     status 0003  
                   wtemp0 004E        ??_main__toggle_led 0000           __initialization 000E  
            __end_of_main 0028                    ??_main 0000                    _INTEDG 040E  
              __i1fptable 0011                    fptable 0010                    fptotal 0000  
                  saved_w 004E               ?_Global_ISR 000C   __end_of__initialization 000E  
          __pcstackCOMMON 0000                __pmaintext 0018                __pintentry 0004  
                 i1fpbase 0016                   __ptext1 0028                   __ptext2 0038  
     __size_of__i1fptable 0007      end_of_initialization 000E              ??_Global_ISR 000C  
      __end_of_Global_ISR 0038       start_initialization 000E          _main__toggle_led 0038  
      __end_of__i1fptable 0018                 ___latbits 0000             __pcstackBANK0 000C  
               __pnvBANK0 000F                 __pfunctab 0010         interrupt_function 0004  
                i1fptable 0011                  i1fptotal 0002       fp__main__toggle_led 0017  
__end_of_main__toggle_led 003C                  intlevel1 0010  
