

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue May  6 00:16:52 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F83
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,space=0,delta=2
    12                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	functab,global,class=ENTRY,space=0,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x2E,2
    16     0000                     
    17                           ; Generated 05/12/2024 GMT
    18                           ; 
    19                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F83 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0008                     EEDATA          equ	8	;# 
    67     0009                     EEADR           equ	9	;# 
    68     000A                     PCLATH          equ	10	;# 
    69     000B                     INTCON          equ	11	;# 
    70     0081                     OPTION_REG      equ	129	;# 
    71     0085                     TRISA           equ	133	;# 
    72     0086                     TRISB           equ	134	;# 
    73     0088                     EECON1          equ	136	;# 
    74     0089                     EECON2          equ	137	;# 
    75     0000                     INDF            equ	0	;# 
    76     0001                     TMR0            equ	1	;# 
    77     0002                     PCL             equ	2	;# 
    78     0003                     STATUS          equ	3	;# 
    79     0004                     FSR             equ	4	;# 
    80     0005                     PORTA           equ	5	;# 
    81     0006                     PORTB           equ	6	;# 
    82     0008                     EEDATA          equ	8	;# 
    83     0009                     EEADR           equ	9	;# 
    84     000A                     PCLATH          equ	10	;# 
    85     000B                     INTCON          equ	11	;# 
    86     0081                     OPTION_REG      equ	129	;# 
    87     0085                     TRISA           equ	133	;# 
    88     0086                     TRISB           equ	134	;# 
    89     0088                     EECON1          equ	136	;# 
    90     0089                     EECON2          equ	137	;# 
    91                           
    92                           	psect	nvBANK0
    93     000F                     __pnvBANK0:
    94     000F                     _ptr_timer0_isr:
    95     000F                     	ds	1
    96     0005                     _PORTA          set	5
    97     0001                     _TMR0           set	1
    98     005D                     _T0IE           set	93
    99     005F                     _GIE            set	95
   100     005A                     _T0IF           set	90
   101     0081                     _OPTION_REG     set	129
   102     0085                     _TRISA          set	133
   103     040B                     _PSA            set	1035
   104     040D                     _T0CS           set	1037
   105                           
   106                           	psect	cinit
   107     000E                     start_initialization:	
   108                           ; #config settings
   109                           
   110     000E                     __initialization:
   111                           
   112                           ; Clear objects allocated to BANK0
   113     000E  1283               	bcf	3,5	;RP0=0, select bank0
   114     000F  0190               	clrf	__pbssBANK0& (0+127)
   115     0010                     end_of_initialization:	
   116                           ;End of C runtime variable initialization code
   117                           
   118     0010                     __end_of__initialization:
   119     0010  0183               	clrf	3
   120     0011  281A               	ljmp	_main	;jump to C main() function
   121                           
   122                           	psect	bssBANK0
   123     0010                     __pbssBANK0:
   124     0010                     _timer0__initial:
   125     0010                     	ds	1
   126                           
   127                           	psect	cstackCOMMON
   128     0000                     __pcstackCOMMON:
   129     0000                     ??_main__blinking:
   130     0000                     ??_main:	
   131                           ; 1 bytes @ 0x0
   132                           
   133                           
   134                           	psect	cstackBANK0
   135     000C                     __pcstackBANK0:	
   136                           ; 1 bytes @ 0x0
   137                           
   138     000C                     ?_Global_ISR:
   139     000C                     ?_main__blinking:	
   140                           ; 1 bytes @ 0x0
   141                           
   142     000C                     ?_main:	
   143                           ; 1 bytes @ 0x0
   144                           
   145     000C                     ??_Global_ISR:	
   146                           ; 1 bytes @ 0x0
   147                           
   148                           
   149                           ; 1 bytes @ 0x0
   150     000C                     	ds	3
   151                           
   152                           	psect	maintext
   153     001A                     __pmaintext:	
   154 ;;
   155 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   156 ;;
   157 ;; *************** function _main *****************
   158 ;; Defined at:
   159 ;;		line 217 in file "main.c"
   160 ;; Parameters:    Size  Location     Type
   161 ;;		None
   162 ;; Auto vars:     Size  Location     Type
   163 ;;		None
   164 ;; Return value:  Size  Location     Type
   165 ;;                  1    wreg      void 
   166 ;; Registers used:
   167 ;;		wreg, status,2, status,0
   168 ;; Tracked objects:
   169 ;;		On entry : B00/0
   170 ;;		On exit  : 0/0
   171 ;;		Unchanged: 0/0
   172 ;; Data sizes:     COMMON   BANK0
   173 ;;      Params:         0       0
   174 ;;      Locals:         0       0
   175 ;;      Temps:          0       0
   176 ;;      Totals:         0       0
   177 ;;Total ram usage:        0 bytes
   178 ;; Hardware stack levels required when called: 2
   179 ;; This function calls:
   180 ;;		Nothing
   181 ;; This function is called by:
   182 ;;		Startup code after reset
   183 ;; This function uses a non-reentrant model
   184 ;;
   185                           
   186     001A                     _main:	
   187                           ;psect for function _main
   188                           
   189     001A                     l665:	
   190                           ;incstack = 0
   191                           ; Regs used in _main: [wreg+status,2+status,0]
   192                           
   193                           
   194                           ;main.c: 218:  ptr_timer0_isr = main__blinking;
   195     001A  3001               	movlw	(low (fp__main__blinking-i1fpbase))& (0+255)
   196     001B  1283               	bcf	3,5	;RP0=0, select bank0
   197     001C  008F               	movwf	_ptr_timer0_isr
   198     001D                     l669:	
   199                           ;main.c: 219:  if( 0 == 1 ) { *(&TRISA + (12 >> 3)) |= (0x01 << (12 - ((12 >> 3) << 3)))
      +                          ; } else { *(&TRISA + (12 >> 3)) &= ~(0x01 << (12 - ((12 >> 3) << 3))); };;
   200                           
   201     001D  30EF               	movlw	239
   202     001E  1683               	bsf	3,5	;RP0=1, select bank1
   203     001F  0586               	andwf	6,f	;volatile
   204     0020                     l671:
   205                           
   206                           ;main.c: 220:  T0CS = 0; if( 100 <= (u32)((u32)(1024) / (u8)(10000000/1000000)) ) { PSA 
      +                          = 1; timer0__initial = (u8)((u8)(256 - (u16)(100 >> (u8)(2)) * (u16)(10000000/1000000)))
      +                          ; } else { PSA = 0; OPTION_REG &= 0b11111000; if( 100 <= (u32)((u32)(2048) / (u8)(100000
      +                          00/1000000)) ) { OPTION_REG |= 0b000; timer0__initial = (u8)((u8)(256 - (u16)(100 >> (u8
      +                          )(3)) * (u16)(10000000/1000000))); } else if( 100 <= (u32)((u32)(4096) / (u8)(10000000/1
      +                          000000)) ) { OPTION_REG |= 0b001; timer0__initial = (u8)((u8)(256 - (u16)(100 >> (u8)(4)
      +                          ) * (u16)(10000000/1000000))); } else if( 100 <= (u32)((u32)(8192) / (u8)(10000000/10000
      +                          00)) ) { OPTION_REG |= 0b010; timer0__initial = (u8)((u8)(256 - (u16)(100 >> (u8)(5)) * 
      +                          (u16)(10000000/1000000))); } else if( 100 <= (u32)((u32)(16384) / (u8)(10000000/1000000)
      +                          ) ) { OPTION_REG |= 0b011; timer0__initial = (u8)((u8)(256 - (u16)(100 >> (u8)(6)) * (u1
      +                          6)(10000000/1000000))); } else if( 100 <= (u32)((u32)(32768) / (u8)(10000000/1000000)) )
      +                           { OPTION_REG |= 0b100; timer0__initial = (u8)((u8)(256 - (u16)(100 >> (u8)(7)) * (u16)(
      +                          10000000/1000000))); } else if( 100 <= (u32)((u32)(65536) / (u8)(10000000/1000000)) ) { 
      +                          OPTION_REG |= 0b101; timer0__initial = (u8)((u8)(256 - (u16)(100 >> (u8)(8)) * (u16)(100
      +                          00000/1000000))); } else if( 100 <= (u32)((u32)(131072) / (u8)(10000000/1000000)) ) { OP
      +                          TION_REG |= 0b110; timer0__initial = (u8)((u8)(256 - (u16)(100 >> (u8)(9)) * (u16)(10000
      +                          000/1000000))); } else { OPTION_REG |= 0b111; timer0__initial = (u8)((u8)(256 - (u16)(10
      +                          0 >> (u8)(10)) * (u16)(10000000/1000000))); }; }; TMR0 = (u8)(timer0__initial);;
   207     0020  1281               	bcf	1,5	;volatile
   208     0021                     l673:
   209     0021  1581               	bsf	1,3	;volatile
   210     0022                     l675:
   211     0022  3006               	movlw	6
   212     0023  1283               	bcf	3,5	;RP0=0, select bank0
   213     0024  0090               	movwf	_timer0__initial
   214     0025                     l701:
   215     0025  0810               	movf	_timer0__initial,w
   216     0026  0081               	movwf	1	;volatile
   217     0027                     l703:
   218                           
   219                           ;main.c: 221:  *(&PORTA + (12 >> 3)) &= ~(0x01 << (12 - ((12 >> 3) << 3)));
   220     0027  30EF               	movlw	239
   221     0028  0586               	andwf	6,f	;volatile
   222     0029                     l705:
   223                           
   224                           ;main.c: 222:  GIE = 1; T0IE = 1;;
   225     0029  178B               	bsf	11,7	;volatile
   226     002A                     l707:
   227     002A  168B               	bsf	11,5	;volatile
   228     002B                     l54:	
   229                           ;main.c: 223:  while( 1 ) {
   230                           
   231     002B                     l55:	
   232                           ;main.c: 224:  }
   233                           
   234     002B  282B               	goto	l54
   235     002C  280D               	ljmp	start
   236     002D                     __end_of_main:
   237                           
   238                           	psect	text1
   239     002D                     __ptext1:	
   240 ;; *************** function _Global_ISR *****************
   241 ;; Defined at:
   242 ;;		line 48 in file "main.c"
   243 ;; Parameters:    Size  Location     Type
   244 ;;		None
   245 ;; Auto vars:     Size  Location     Type
   246 ;;		None
   247 ;; Return value:  Size  Location     Type
   248 ;;                  1    wreg      void 
   249 ;; Registers used:
   250 ;;		wreg, status,2, status,0, pclath, cstack
   251 ;; Tracked objects:
   252 ;;		On entry : 0/0
   253 ;;		On exit  : 0/0
   254 ;;		Unchanged: 0/0
   255 ;; Data sizes:     COMMON   BANK0
   256 ;;      Params:         0       0
   257 ;;      Locals:         0       0
   258 ;;      Temps:          0       3
   259 ;;      Totals:         0       3
   260 ;;Total ram usage:        3 bytes
   261 ;; Hardware stack levels used: 1
   262 ;; Hardware stack levels required when called: 1
   263 ;; This function calls:
   264 ;;		NULL
   265 ;;		_main__blinking
   266 ;; This function is called by:
   267 ;;		Interrupt level 1
   268 ;; This function uses a non-reentrant model
   269 ;;
   270                           
   271     002D                     _Global_ISR:	
   272                           ;psect for function _Global_ISR
   273                           
   274     002D                     i1l659:
   275                           
   276                           ;main.c: 57:  if(T0IF == 1) {
   277     002D  1D0B               	btfss	11,2	;volatile
   278     002E  2830               	goto	u2_21
   279     002F  2831               	goto	u2_20
   280     0030                     u2_21:
   281     0030  2834               	goto	i1l26
   282     0031                     u2_20:
   283     0031                     i1l661:
   284                           
   285                           ;main.c: 58:   ptr_timer0_isr();
   286     0031  080F               	movf	_ptr_timer0_isr,w
   287     0032  2013               	fcall	i1fptable
   288     0033                     i1l663:
   289                           
   290                           ;main.c: 59:   T0IF = 0;
   291     0033  110B               	bcf	11,2	;volatile
   292     0034                     i1l26:
   293     0034  1283               	bcf	3,5	;RP0=0, select bank0
   294     0035  080E               	movf	??_Global_ISR+2,w
   295     0036  080D               	movf	??_Global_ISR+1,w
   296     0037  008A               	movwf	10
   297     0038  0E0C               	swapf	??_Global_ISR,w
   298     0039  0083               	movwf	3
   299     003A  0EAE               	swapf	btemp,f
   300     003B  0E2E               	swapf	btemp,w
   301     003C  0009               	retfie
   302     003D                     __end_of_Global_ISR:
   303                           
   304                           	psect	intentry
   305     0004                     __pintentry:	
   306                           ;incstack = 0
   307                           ; Regs used in _Global_ISR: [wreg+status,2+status,0+pclath+cstack]
   308                           
   309     0004                     interrupt_function:
   310     002E                     saved_w         set	btemp
   311     0004  00AE               	movwf	btemp
   312     0005  0E03               	swapf	3,w
   313     0006  1283               	bcf	3,5	;RP0=0, select bank0
   314     0007  008C               	movwf	??_Global_ISR
   315     0008  080A               	movf	10,w
   316     0009  008D               	movwf	??_Global_ISR+1
   317     000A  082F               	movf	btemp+1,w
   318     000B  008E               	movwf	??_Global_ISR+2
   319     000C  282D               	ljmp	_Global_ISR
   320                           
   321                           	psect	text2
   322     003D                     __ptext2:	
   323 ;; *************** function _main__blinking *****************
   324 ;; Defined at:
   325 ;;		line 212 in file "main.c"
   326 ;; Parameters:    Size  Location     Type
   327 ;;		None
   328 ;; Auto vars:     Size  Location     Type
   329 ;;		None
   330 ;; Return value:  Size  Location     Type
   331 ;;                  1    wreg      void 
   332 ;; Registers used:
   333 ;;		wreg, status,2, status,0
   334 ;; Tracked objects:
   335 ;;		On entry : 0/0
   336 ;;		On exit  : 0/0
   337 ;;		Unchanged: 0/0
   338 ;; Data sizes:     COMMON   BANK0
   339 ;;      Params:         0       0
   340 ;;      Locals:         0       0
   341 ;;      Temps:          0       0
   342 ;;      Totals:         0       0
   343 ;;Total ram usage:        0 bytes
   344 ;; Hardware stack levels used: 1
   345 ;; This function calls:
   346 ;;		Nothing
   347 ;; This function is called by:
   348 ;;		_main
   349 ;;		_Global_ISR
   350 ;; This function uses a non-reentrant model
   351 ;;
   352                           
   353     003D                     _main__blinking:	
   354                           ;psect for function _main__blinking
   355                           
   356     003D                     i1l655:	
   357                           ;incstack = 0
   358                           ; Regs used in _main__blinking: [wreg+status,2+status,0]
   359                           
   360                           
   361                           ;main.c: 213:  TMR0 = (u8)(timer0__initial);
   362     003D  1283               	bcf	3,5	;RP0=0, select bank0
   363     003E  0810               	movf	_timer0__initial,w
   364     003F  0081               	movwf	1	;volatile
   365     0040                     i1l657:
   366                           
   367                           ;main.c: 214:  *(&PORTA + (12 >> 3)) ^= 0x01 << (12 - ((12 >> 3) << 3));
   368     0040  3010               	movlw	16
   369     0041  0686               	xorwf	6,f	;volatile
   370     0042                     i1l31:
   371     0042  0008               	return
   372     0043                     __end_of_main__blinking:
   373     0000                     ___latbits      equ	0
   374     0000                     fptotal         equ	0
   375     0002                     i1fptotal       equ	2
   376                           
   377                           	psect	functab
   378     0012                     __pfunctab:
   379     0000                     fpbase          equ	0
   380     0012                     fptable:
   381     0012  2812               	goto	fptable	;no entries
   382     0013                     __i1fptable:
   383     0013                     i1fptable:
   384     0013  00AF               	movwf	(btemp+1)& (0+127)
   385     0014  3000               	movlw	high i1fptable
   386     0015  008A               	movwf	10
   387     0016  082F               	movf	(btemp+1)& (0+127),w
   388     0017  0782               	addwf	2,f
   389     0018                     i1fpbase:
   390     0018  2818               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
   391     0019                     fp__main__blinking:
   392     0019  283D               	ljmp	_main__blinking
   393     001A                     __end_of__i1fptable:
   394     0007                     __size_of__i1fptable equ	__end_of__i1fptable-__i1fptable
   395     002E                     btemp           set	46	;btemp
   396     002E                     wtemp0          set	46
   397                           
   398                           	psect	config
   399                           
   400                           ;Config register CONFIG @ 0x2007
   401                           ;	Oscillator Selection bits
   402                           ;	FOSC = HS, HS oscillator
   403                           ;	Watchdog Timer
   404                           ;	WDTE = OFF, WDT disabled
   405                           ;	Power-up Timer Enable bit
   406                           ;	PWRTE = ON, Power-up Timer is enabled
   407                           ;	Code Protection bit
   408                           ;	CP = OFF, Code protection disabled
   409     2007                     	org	8199
   410     2007  3FF2               	dw	16370

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            34      3       5

Pointer List with Targets:

    ptr_timer0_isr	PTR FTN()void  size(1) Largest target is 1
		 -> main__blinking(), NULL(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Global_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Global_ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _Global_ISR                                           3     3      0       0
                                              0 BANK0      3     3      0
                                NULL *
                     _main__blinking *
 ---------------------------------------------------------------------------------
 (2) _main__blinking                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _Global_ISR (ROOT)
   NULL(Fake) *
   _main__blinking *

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON            0      0       0      0.0%
BITBANK0            34      0       0      0.0%
COMMON               0      0       0      0.0%
BANK0               34      3       5     14.7%
STACK                0      0       0      0.0%
DATA                 0      0       5      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue May  6 00:16:52 2025

                      pc 0002                       l54 002B                       l55 002B  
                    l701 0025                      l703 0027                      l705 0029  
                    l707 002A                      l671 0020                      l673 0021  
                    l665 001A                      l675 0022                      l669 001D  
                    _GIE 005F                      _PSA 040B                     _T0IE 005D  
                   _T0IF 005A                     _T0CS 040D                     i1l31 0042  
                   i1l26 0034                     _TMR0 0001                     u2_20 0031  
                   u2_21 0030                     _main 001A                     btemp 002E  
                   start 000D          _timer0__initial 0010           _ptr_timer0_isr 000F  
                  ?_main 000C                    i1l661 0031                    i1l655 003D  
                  i1l663 0033                    i1l657 0040                    i1l659 002D  
                  _PORTA 0005                    _TRISA 0085               _Global_ISR 002D  
                  fpbase 0000                    pclath 000A           _main__blinking 003D  
                  status 0003                    wtemp0 002E          __initialization 000E  
           __end_of_main 002D                   ??_main 0000   __end_of_main__blinking 0043  
             __i1fptable 0013                   fptable 0012                   fptotal 0000  
                 saved_w 002E              ?_Global_ISR 000C          ?_main__blinking 000C  
__end_of__initialization 0010           __pcstackCOMMON 0000               __pbssBANK0 0010  
             __pmaintext 001A               __pintentry 0004                  i1fpbase 0018  
                __ptext1 002D                  __ptext2 003D      __size_of__i1fptable 0007  
   end_of_initialization 0010         ??_main__blinking 0000             ??_Global_ISR 000C  
     __end_of_Global_ISR 003D      start_initialization 000E       __end_of__i1fptable 001A  
              ___latbits 0000            __pcstackBANK0 000C                __pnvBANK0 000F  
              __pfunctab 0012        interrupt_function 0004                 i1fptable 0013  
               i1fptotal 0002                 intlevel1 0012        fp__main__blinking 0019  
             _OPTION_REG 0081  
