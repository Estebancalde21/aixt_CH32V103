

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Dec  5 20:58:15 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F83
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    11                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,space=0,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	functab,global,class=ENTRY,space=0,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x2E,2
    18     0000                     
    19                           ; Generated 25/07/2024 GMT
    20                           ; 
    21                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F83 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0004                     fsr             equ	4
    54     0004                     fsr0            equ	4
    55     0000                     indf            equ	0
    56     0000                     indf0           equ	0
    57     0002                     pc              equ	2
    58     0002                     pcl             equ	2
    59     000A                     pclath          equ	10
    60     0003                     status          equ	3
    61     0000                     INDF            equ	0	;# 
    62     0001                     TMR0            equ	1	;# 
    63     0002                     PCL             equ	2	;# 
    64     0003                     STATUS          equ	3	;# 
    65     0004                     FSR             equ	4	;# 
    66     0005                     PORTA           equ	5	;# 
    67     0006                     PORTB           equ	6	;# 
    68     0008                     EEDATA          equ	8	;# 
    69     0009                     EEADR           equ	9	;# 
    70     000A                     PCLATH          equ	10	;# 
    71     000B                     INTCON          equ	11	;# 
    72     0081                     OPTION_REG      equ	129	;# 
    73     0085                     TRISA           equ	133	;# 
    74     0086                     TRISB           equ	134	;# 
    75     0088                     EECON1          equ	136	;# 
    76     0089                     EECON2          equ	137	;# 
    77     0000                     INDF            equ	0	;# 
    78     0001                     TMR0            equ	1	;# 
    79     0002                     PCL             equ	2	;# 
    80     0003                     STATUS          equ	3	;# 
    81     0004                     FSR             equ	4	;# 
    82     0005                     PORTA           equ	5	;# 
    83     0006                     PORTB           equ	6	;# 
    84     0008                     EEDATA          equ	8	;# 
    85     0009                     EEADR           equ	9	;# 
    86     000A                     PCLATH          equ	10	;# 
    87     000B                     INTCON          equ	11	;# 
    88     0081                     OPTION_REG      equ	129	;# 
    89     0085                     TRISA           equ	133	;# 
    90     0086                     TRISB           equ	134	;# 
    91     0088                     EECON1          equ	136	;# 
    92     0089                     EECON2          equ	137	;# 
    93                           
    94                           	psect	idataBANK0
    95     0126                     __pidataBANK0:
    96                           
    97                           ;initializer for _timer0__initial
    98     0126  34FF               	retlw	-1
    99                           
   100                           ;initializer for _timer0__prescaler
   101     0127  3407               	retlw	7
   102                           
   103                           	psect	nvBANK0
   104     0023                     __pnvBANK0:
   105     0023                     _ptr_timer0_isr:
   106     0023                     	ds	1
   107     0001                     _TMR0           set	1
   108     0005                     _PORTA          set	5
   109     005D                     _T0IE           set	93
   110     005F                     _GIE            set	95
   111     005A                     _T0IF           set	90
   112     0081                     _OPTION_REG     set	129
   113     0085                     _TRISA          set	133
   114     040B                     _PSA            set	1035
   115     040D                     _T0CS           set	1037
   116                           
   117                           	psect	cinit
   118     000E                     start_initialization:	
   119                           ; #config settings
   120                           
   121     000E                     __initialization:
   122                           
   123                           ; Initialize objects allocated to BANK0
   124     000E  2126               	fcall	__pidataBANK0	;fetch initializer
   125     000F  00A1               	movwf	__pdataBANK0& (0+127)
   126     0010  2127               	fcall	__pidataBANK0+1	;fetch initializer
   127     0011  00A2               	movwf	(__pdataBANK0+1)& (0+127)
   128     0012                     end_of_initialization:	
   129                           ;End of C runtime variable initialization code
   130                           
   131     0012                     __end_of__initialization:
   132     0012  0183               	clrf	3
   133     0013  28B4               	ljmp	_main	;jump to C main() function
   134                           
   135                           	psect	dataBANK0
   136     0021                     __pdataBANK0:
   137     0021                     _timer0__initial:
   138     0021                     	ds	1
   139     0022                     _timer0__prescaler:
   140     0022                     	ds	1
   141                           
   142                           	psect	cstackCOMMON
   143     0000                     __pcstackCOMMON:
   144     0000                     ??_main__blinking:
   145                           
   146                           	psect	cstackBANK0
   147     000C                     __pcstackBANK0:	
   148                           ; 1 bytes @ 0x0
   149                           
   150     000C                     ?_Global_ISR:
   151     000C                     ?_main__blinking:	
   152                           ; 1 bytes @ 0x0
   153                           
   154     000C                     ?_main:	
   155                           ; 1 bytes @ 0x0
   156                           
   157     000C                     ??_Global_ISR:	
   158                           ; 1 bytes @ 0x0
   159                           
   160                           
   161                           ; 1 bytes @ 0x0
   162     000C                     	ds	3
   163     000F                     ?___aldiv:
   164     000F                     ___aldiv@divisor:	
   165                           ; 4 bytes @ 0x3
   166                           
   167                           
   168                           ; 4 bytes @ 0x3
   169     000F                     	ds	4
   170     0013                     ___aldiv@dividend:
   171                           
   172                           ; 4 bytes @ 0x7
   173     0013                     	ds	4
   174     0017                     ??___aldiv:
   175                           
   176                           ; 1 bytes @ 0xB
   177     0017                     	ds	1
   178     0018                     ___aldiv@counter:
   179                           
   180                           ; 1 bytes @ 0xC
   181     0018                     	ds	1
   182     0019                     ___aldiv@sign:
   183                           
   184                           ; 1 bytes @ 0xD
   185     0019                     	ds	1
   186     001A                     ___aldiv@quotient:
   187                           
   188                           ; 4 bytes @ 0xE
   189     001A                     	ds	4
   190     001E                     ??_main:
   191                           
   192                           ; 1 bytes @ 0x12
   193     001E                     	ds	3
   194                           
   195                           	psect	maintext
   196     00B4                     __pmaintext:	
   197 ;;
   198 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   199 ;;
   200 ;; *************** function _main *****************
   201 ;; Defined at:
   202 ;;		line 169 in file "main.c"
   203 ;; Parameters:    Size  Location     Type
   204 ;;		None
   205 ;; Auto vars:     Size  Location     Type
   206 ;;		None
   207 ;; Return value:  Size  Location     Type
   208 ;;                  1    wreg      void 
   209 ;; Registers used:
   210 ;;		wreg, status,2, status,0, pclath, cstack
   211 ;; Tracked objects:
   212 ;;		On entry : B00/0
   213 ;;		On exit  : 0/0
   214 ;;		Unchanged: 0/0
   215 ;; Data sizes:     COMMON   BANK0
   216 ;;      Params:         0       0
   217 ;;      Locals:         0       0
   218 ;;      Temps:          0       3
   219 ;;      Totals:         0       3
   220 ;;Total ram usage:        3 bytes
   221 ;; Hardware stack levels required when called: 3
   222 ;; This function calls:
   223 ;;		___aldiv
   224 ;; This function is called by:
   225 ;;		Startup code after reset
   226 ;; This function uses a non-reentrant model
   227 ;;
   228                           
   229     00B4                     _main:	
   230                           ;psect for function _main
   231                           
   232     00B4                     l726:	
   233                           ;incstack = 0
   234                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   235                           
   236                           
   237                           ;main.c: 170:  ptr_timer0_isr = main__blinking;
   238     00B4  3001               	movlw	(low (fp__main__blinking-i1fpbase))& (0+255)
   239     00B5  1283               	bcf	3,5	;RP0=0, select bank0
   240     00B6  00A3               	movwf	_ptr_timer0_isr
   241     00B7                     l730:	
   242                           ;main.c: 171:  if( 0 == 1 ) { *(&TRISA + (12 >> 3)) |= (0x01 << (12 - ((12 >> 3) << 3)))
      +                          ; } else { *(&TRISA + (12 >> 3)) &= ~(0x01 << (12 - ((12 >> 3) << 3))); };;
   243                           
   244     00B7  30EF               	movlw	239
   245     00B8  1683               	bsf	3,5	;RP0=1, select bank1
   246     00B9  0586               	andwf	6,f	;volatile
   247     00BA                     l732:
   248                           
   249                           ;main.c: 172:  timer0__prescaler = (i8)((i8)(7)); timer0__initial = (i8)((i8)(-1)); whil
      +                          e( (timer0__initial < 0 || timer0__initial > 127) && timer0__prescaler >= 0 ) { timer0__
      +                          prescaler--; timer0__initial = (i8)((i8)(256 - (20000 * 4000000/1000000) / (4 * (1 << (t
      +                          imer0__prescaler + 1))))); } T0CS = 0; if( timer0__prescaler == -1 ) { PSA = 1; } else {
      +                           PSA = 0; OPTION_REG &= 0b11111000; OPTION_REG |= timer0__prescaler; }; TMR0 = (u8)(time
      +                          r0__initial);;
   250     00BA  3007               	movlw	7
   251     00BB  1283               	bcf	3,5	;RP0=0, select bank0
   252     00BC  00A2               	movwf	_timer0__prescaler
   253     00BD                     l734:
   254     00BD  30FF               	movlw	-1
   255     00BE  00A1               	movwf	_timer0__initial
   256     00BF  28EC               	goto	l740
   257     00C0                     l736:
   258     00C0  30FF               	movlw	255
   259     00C1  07A2               	addwf	_timer0__prescaler,f
   260     00C2                     l738:
   261     00C2  0822               	movf	_timer0__prescaler,w
   262     00C3  3E01               	addlw	1
   263     00C4  009E               	movwf	??_main
   264     00C5  0A9E               	incf	??_main,f
   265     00C6  3001               	movlw	1
   266     00C7  009F               	movwf	??_main+1
   267     00C8  3000               	movlw	0
   268     00C9  00A0               	movwf	??_main+2
   269     00CA  28CE               	goto	u274
   270     00CB                     u275:
   271     00CB  1003               	clrc
   272     00CC  0D9F               	rlf	??_main+1,f
   273     00CD  0DA0               	rlf	??_main+2,f
   274     00CE                     u274:
   275     00CE  0B9E               	decfsz	??_main,f
   276     00CF  28CB               	goto	u275
   277     00D0  1003               	clrc
   278     00D1  0D9F               	rlf	??_main+1,f
   279     00D2  0DA0               	rlf	??_main+2,f
   280     00D3  1003               	clrc
   281     00D4  0D9F               	rlf	??_main+1,f
   282     00D5  0DA0               	rlf	??_main+2,f
   283     00D6  081F               	movf	??_main+1,w
   284     00D7  008F               	movwf	___aldiv@divisor
   285     00D8  0820               	movf	??_main+2,w
   286     00D9  0090               	movwf	___aldiv@divisor+1
   287     00DA  3000               	movlw	0
   288     00DB  1B90               	btfsc	___aldiv@divisor+1,7
   289     00DC  30FF               	movlw	255
   290     00DD  0091               	movwf	___aldiv@divisor+2
   291     00DE  0092               	movwf	___aldiv@divisor+3
   292     00DF  30FF               	movlw	255
   293     00E0  0096               	movwf	___aldiv@dividend+3
   294     00E1  30FF               	movlw	255
   295     00E2  0095               	movwf	___aldiv@dividend+2
   296     00E3  30F9               	movlw	249
   297     00E4  0094               	movwf	___aldiv@dividend+1
   298     00E5  30BC               	movlw	188
   299     00E6  0093               	movwf	___aldiv@dividend
   300     00E7  201C               	fcall	___aldiv
   301     00E8  1283               	bcf	3,5	;RP0=0, select bank0
   302     00E9  080F               	movf	?___aldiv,w
   303     00EA  3C00               	sublw	0
   304     00EB  00A1               	movwf	_timer0__initial
   305     00EC                     l740:
   306     00EC  1FA1               	btfss	_timer0__initial,7
   307     00ED  28EF               	goto	u281
   308     00EE  28F0               	goto	u280
   309     00EF                     u281:
   310     00EF  28F4               	goto	l44
   311     00F0                     u280:
   312     00F0                     l742:
   313     00F0  1FA2               	btfss	_timer0__prescaler,7
   314     00F1  28F3               	goto	u291
   315     00F2  28F4               	goto	u290
   316     00F3                     u291:
   317     00F3  28C0               	goto	l736
   318     00F4                     u290:
   319     00F4                     l44:
   320     00F4  1683               	bsf	3,5	;RP0=1, select bank1
   321     00F5  1281               	bcf	1,5	;volatile
   322     00F6                     l744:
   323     00F6  1283               	bcf	3,5	;RP0=0, select bank0
   324     00F7  0A22               	incf	_timer0__prescaler,w
   325     00F8  1D03               	btfss	3,2
   326     00F9  28FB               	goto	u301
   327     00FA  28FC               	goto	u300
   328     00FB                     u301:
   329     00FB  28FF               	goto	l45
   330     00FC                     u300:
   331     00FC                     l746:
   332     00FC  1683               	bsf	3,5	;RP0=1, select bank1
   333     00FD  1581               	bsf	1,3	;volatile
   334     00FE  2907               	goto	l750
   335     00FF                     l45:
   336     00FF  1683               	bsf	3,5	;RP0=1, select bank1
   337     0100  1181               	bcf	1,3	;volatile
   338     0101                     l748:
   339     0101  30F8               	movlw	248
   340     0102  0581               	andwf	1,f	;volatile
   341     0103  1283               	bcf	3,5	;RP0=0, select bank0
   342     0104  0822               	movf	_timer0__prescaler,w	;volatile
   343     0105  1683               	bsf	3,5	;RP0=1, select bank1
   344     0106  0481               	iorwf	1,f	;volatile
   345     0107                     l750:
   346     0107  1283               	bcf	3,5	;RP0=0, select bank0
   347     0108  0821               	movf	_timer0__initial,w
   348     0109  0081               	movwf	1	;volatile
   349     010A                     l752:
   350                           
   351                           ;main.c: 173:  *(&PORTA + (12 >> 3)) &= ~(0x01 << (12 - ((12 >> 3) << 3)));
   352     010A  30EF               	movlw	239
   353     010B  0586               	andwf	6,f	;volatile
   354     010C                     l754:
   355                           
   356                           ;main.c: 174:  GIE = 1; T0IE = 1;;
   357     010C  178B               	bsf	11,7	;volatile
   358     010D                     l756:
   359     010D  168B               	bsf	11,5	;volatile
   360     010E                     l47:	
   361                           ;main.c: 175:  while( 1 ) {
   362                           
   363     010E                     l48:	
   364                           ;main.c: 176:  }
   365                           
   366     010E  290E               	goto	l47
   367     010F  280D               	ljmp	start
   368     0110                     __end_of_main:
   369                           
   370                           	psect	text1
   371     001C                     __ptext1:	
   372 ;; *************** function ___aldiv *****************
   373 ;; Defined at:
   374 ;;		line 5 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/aldiv.c"
   375 ;; Parameters:    Size  Location     Type
   376 ;;  divisor         4    3[BANK0 ] long 
   377 ;;  dividend        4    7[BANK0 ] long 
   378 ;; Auto vars:     Size  Location     Type
   379 ;;  quotient        4   14[BANK0 ] long 
   380 ;;  sign            1   13[BANK0 ] unsigned char 
   381 ;;  counter         1   12[BANK0 ] unsigned char 
   382 ;; Return value:  Size  Location     Type
   383 ;;                  4    3[BANK0 ] long 
   384 ;; Registers used:
   385 ;;		wreg, status,2, status,0
   386 ;; Tracked objects:
   387 ;;		On entry : 0/0
   388 ;;		On exit  : 0/0
   389 ;;		Unchanged: 0/0
   390 ;; Data sizes:     COMMON   BANK0
   391 ;;      Params:         0       8
   392 ;;      Locals:         0       6
   393 ;;      Temps:          0       1
   394 ;;      Totals:         0      15
   395 ;;Total ram usage:       15 bytes
   396 ;; Hardware stack levels used: 1
   397 ;; Hardware stack levels required when called: 2
   398 ;; This function calls:
   399 ;;		Nothing
   400 ;; This function is called by:
   401 ;;		_main
   402 ;; This function uses a non-reentrant model
   403 ;;
   404                           
   405     001C                     ___aldiv:	
   406                           ;psect for function ___aldiv
   407                           
   408     001C                     l680:	
   409                           ;incstack = 0
   410                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
   411                           
   412     001C  1283               	bcf	3,5	;RP0=0, select bank0
   413     001D  0199               	clrf	___aldiv@sign
   414     001E                     l682:
   415     001E  1F92               	btfss	___aldiv@divisor+3,7
   416     001F  2821               	goto	u161
   417     0020  2822               	goto	u160
   418     0021                     u161:
   419     0021  282F               	goto	l201
   420     0022                     u160:
   421     0022                     l684:
   422     0022  098F               	comf	___aldiv@divisor,f
   423     0023  0990               	comf	___aldiv@divisor+1,f
   424     0024  0991               	comf	___aldiv@divisor+2,f
   425     0025  0992               	comf	___aldiv@divisor+3,f
   426     0026  0A8F               	incf	___aldiv@divisor,f
   427     0027  1903               	skipnz
   428     0028  0A90               	incf	___aldiv@divisor+1,f
   429     0029  1903               	skipnz
   430     002A  0A91               	incf	___aldiv@divisor+2,f
   431     002B  1903               	skipnz
   432     002C  0A92               	incf	___aldiv@divisor+3,f
   433     002D  3001               	movlw	1
   434     002E  0099               	movwf	___aldiv@sign
   435     002F                     l201:
   436     002F  1F96               	btfss	___aldiv@dividend+3,7
   437     0030  2832               	goto	u171
   438     0031  2833               	goto	u170
   439     0032                     u171:
   440     0032  2840               	goto	l690
   441     0033                     u170:
   442     0033                     l686:
   443     0033  0993               	comf	___aldiv@dividend,f
   444     0034  0994               	comf	___aldiv@dividend+1,f
   445     0035  0995               	comf	___aldiv@dividend+2,f
   446     0036  0996               	comf	___aldiv@dividend+3,f
   447     0037  0A93               	incf	___aldiv@dividend,f
   448     0038  1903               	skipnz
   449     0039  0A94               	incf	___aldiv@dividend+1,f
   450     003A  1903               	skipnz
   451     003B  0A95               	incf	___aldiv@dividend+2,f
   452     003C  1903               	skipnz
   453     003D  0A96               	incf	___aldiv@dividend+3,f
   454     003E                     l688:
   455     003E  3001               	movlw	1
   456     003F  0699               	xorwf	___aldiv@sign,f
   457     0040                     l690:
   458     0040  3000               	movlw	0
   459     0041  009D               	movwf	___aldiv@quotient+3
   460     0042  3000               	movlw	0
   461     0043  009C               	movwf	___aldiv@quotient+2
   462     0044  3000               	movlw	0
   463     0045  009B               	movwf	___aldiv@quotient+1
   464     0046  3000               	movlw	0
   465     0047  009A               	movwf	___aldiv@quotient
   466     0048                     l692:
   467     0048  0812               	movf	___aldiv@divisor+3,w
   468     0049  0411               	iorwf	___aldiv@divisor+2,w
   469     004A  0410               	iorwf	___aldiv@divisor+1,w
   470     004B  040F               	iorwf	___aldiv@divisor,w
   471     004C  1903               	skipnz
   472     004D  284F               	goto	u181
   473     004E  2850               	goto	u180
   474     004F                     u181:
   475     004F  289B               	goto	l712
   476     0050                     u180:
   477     0050                     l694:
   478     0050  3001               	movlw	1
   479     0051  0098               	movwf	___aldiv@counter
   480     0052  285E               	goto	l698
   481     0053                     l696:
   482     0053  3001               	movlw	1
   483     0054  0097               	movwf	??___aldiv
   484     0055                     u195:
   485     0055  1003               	clrc
   486     0056  0D8F               	rlf	___aldiv@divisor,f
   487     0057  0D90               	rlf	___aldiv@divisor+1,f
   488     0058  0D91               	rlf	___aldiv@divisor+2,f
   489     0059  0D92               	rlf	___aldiv@divisor+3,f
   490     005A  0B97               	decfsz	??___aldiv,f
   491     005B  2855               	goto	u195
   492     005C  3001               	movlw	1
   493     005D  0798               	addwf	___aldiv@counter,f
   494     005E                     l698:
   495     005E  1F92               	btfss	___aldiv@divisor+3,7
   496     005F  2861               	goto	u201
   497     0060  2862               	goto	u200
   498     0061                     u201:
   499     0061  2853               	goto	l696
   500     0062                     u200:
   501     0062                     l700:
   502     0062  3001               	movlw	1
   503     0063  0097               	movwf	??___aldiv
   504     0064                     u215:
   505     0064  1003               	clrc
   506     0065  0D9A               	rlf	___aldiv@quotient,f
   507     0066  0D9B               	rlf	___aldiv@quotient+1,f
   508     0067  0D9C               	rlf	___aldiv@quotient+2,f
   509     0068  0D9D               	rlf	___aldiv@quotient+3,f
   510     0069  0B97               	decfsz	??___aldiv,f
   511     006A  2864               	goto	u215
   512     006B                     l702:
   513     006B  0812               	movf	___aldiv@divisor+3,w
   514     006C  0216               	subwf	___aldiv@dividend+3,w
   515     006D  1D03               	skipz
   516     006E  2879               	goto	u225
   517     006F  0811               	movf	___aldiv@divisor+2,w
   518     0070  0215               	subwf	___aldiv@dividend+2,w
   519     0071  1D03               	skipz
   520     0072  2879               	goto	u225
   521     0073  0810               	movf	___aldiv@divisor+1,w
   522     0074  0214               	subwf	___aldiv@dividend+1,w
   523     0075  1D03               	skipz
   524     0076  2879               	goto	u225
   525     0077  080F               	movf	___aldiv@divisor,w
   526     0078  0213               	subwf	___aldiv@dividend,w
   527     0079                     u225:
   528     0079  1C03               	skipc
   529     007A  287C               	goto	u221
   530     007B  287D               	goto	u220
   531     007C                     u221:
   532     007C  288C               	goto	l708
   533     007D                     u220:
   534     007D                     l704:
   535     007D  080F               	movf	___aldiv@divisor,w
   536     007E  0293               	subwf	___aldiv@dividend,f
   537     007F  0810               	movf	___aldiv@divisor+1,w
   538     0080  1C03               	skipc
   539     0081  0F10               	incfsz	___aldiv@divisor+1,w
   540     0082  0294               	subwf	___aldiv@dividend+1,f
   541     0083  0811               	movf	___aldiv@divisor+2,w
   542     0084  1C03               	skipc
   543     0085  0F11               	incfsz	___aldiv@divisor+2,w
   544     0086  0295               	subwf	___aldiv@dividend+2,f
   545     0087  0812               	movf	___aldiv@divisor+3,w
   546     0088  1C03               	skipc
   547     0089  0F12               	incfsz	___aldiv@divisor+3,w
   548     008A  0296               	subwf	___aldiv@dividend+3,f
   549     008B                     l706:
   550     008B  141A               	bsf	___aldiv@quotient,0
   551     008C                     l708:
   552     008C  3001               	movlw	1
   553     008D                     u235:
   554     008D  1003               	clrc
   555     008E  0C92               	rrf	___aldiv@divisor+3,f
   556     008F  0C91               	rrf	___aldiv@divisor+2,f
   557     0090  0C90               	rrf	___aldiv@divisor+1,f
   558     0091  0C8F               	rrf	___aldiv@divisor,f
   559     0092  3EFF               	addlw	-1
   560     0093  1D03               	skipz
   561     0094  288D               	goto	u235
   562     0095                     l710:
   563     0095  3001               	movlw	1
   564     0096  0298               	subwf	___aldiv@counter,f
   565     0097  1D03               	btfss	3,2
   566     0098  289A               	goto	u241
   567     0099  289B               	goto	u240
   568     009A                     u241:
   569     009A  2862               	goto	l700
   570     009B                     u240:
   571     009B                     l712:
   572     009B  0819               	movf	___aldiv@sign,w
   573     009C  1903               	btfsc	3,2
   574     009D  289F               	goto	u251
   575     009E  28A0               	goto	u250
   576     009F                     u251:
   577     009F  28AB               	goto	l716
   578     00A0                     u250:
   579     00A0                     l714:
   580     00A0  099A               	comf	___aldiv@quotient,f
   581     00A1  099B               	comf	___aldiv@quotient+1,f
   582     00A2  099C               	comf	___aldiv@quotient+2,f
   583     00A3  099D               	comf	___aldiv@quotient+3,f
   584     00A4  0A9A               	incf	___aldiv@quotient,f
   585     00A5  1903               	skipnz
   586     00A6  0A9B               	incf	___aldiv@quotient+1,f
   587     00A7  1903               	skipnz
   588     00A8  0A9C               	incf	___aldiv@quotient+2,f
   589     00A9  1903               	skipnz
   590     00AA  0A9D               	incf	___aldiv@quotient+3,f
   591     00AB                     l716:
   592     00AB  081D               	movf	___aldiv@quotient+3,w
   593     00AC  0092               	movwf	?___aldiv+3
   594     00AD  081C               	movf	___aldiv@quotient+2,w
   595     00AE  0091               	movwf	?___aldiv+2
   596     00AF  081B               	movf	___aldiv@quotient+1,w
   597     00B0  0090               	movwf	?___aldiv+1
   598     00B1  081A               	movf	___aldiv@quotient,w
   599     00B2  008F               	movwf	?___aldiv
   600     00B3                     l211:
   601     00B3  0008               	return
   602     00B4                     __end_of___aldiv:
   603                           
   604                           	psect	text2
   605     0110                     __ptext2:	
   606 ;; *************** function _Global_ISR *****************
   607 ;; Defined at:
   608 ;;		line 47 in file "main.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;		None
   611 ;; Auto vars:     Size  Location     Type
   612 ;;		None
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg, status,2, status,0, pclath, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMMON   BANK0
   622 ;;      Params:         0       0
   623 ;;      Locals:         0       0
   624 ;;      Temps:          0       3
   625 ;;      Totals:         0       3
   626 ;;Total ram usage:        3 bytes
   627 ;; Hardware stack levels used: 1
   628 ;; Hardware stack levels required when called: 1
   629 ;; This function calls:
   630 ;;		NULL
   631 ;;		_main__blinking
   632 ;; This function is called by:
   633 ;;		Interrupt level 1
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637     0110                     _Global_ISR:	
   638                           ;psect for function _Global_ISR
   639                           
   640     0110                     i1l720:
   641                           
   642                           ;main.c: 56:  if(T0IF == 1) {
   643     0110  1D0B               	btfss	11,2	;volatile
   644     0111  2913               	goto	u26_21
   645     0112  2914               	goto	u26_20
   646     0113                     u26_21:
   647     0113  2917               	goto	i1l26
   648     0114                     u26_20:
   649     0114                     i1l722:
   650                           
   651                           ;main.c: 57:   ptr_timer0_isr();
   652     0114  0823               	movf	_ptr_timer0_isr,w
   653     0115  2015               	fcall	i1fptable
   654     0116                     i1l724:
   655                           
   656                           ;main.c: 58:   T0IF = 0;
   657     0116  110B               	bcf	11,2	;volatile
   658     0117                     i1l26:
   659     0117  1283               	bcf	3,5	;RP0=0, select bank0
   660     0118  080E               	movf	??_Global_ISR+2,w
   661     0119  080D               	movf	??_Global_ISR+1,w
   662     011A  008A               	movwf	10
   663     011B  0E0C               	swapf	??_Global_ISR,w
   664     011C  0083               	movwf	3
   665     011D  0EAE               	swapf	btemp,f
   666     011E  0E2E               	swapf	btemp,w
   667     011F  0009               	retfie
   668     0120                     __end_of_Global_ISR:
   669                           
   670                           	psect	intentry
   671     0004                     __pintentry:	
   672                           ;incstack = 0
   673                           ; Regs used in _Global_ISR: [wreg+status,2+status,0+pclath+cstack]
   674                           
   675     0004                     interrupt_function:
   676     002E                     saved_w         set	btemp
   677     0004  00AE               	movwf	btemp
   678     0005  0E03               	swapf	3,w
   679     0006  1283               	bcf	3,5	;RP0=0, select bank0
   680     0007  008C               	movwf	??_Global_ISR
   681     0008  080A               	movf	10,w
   682     0009  008D               	movwf	??_Global_ISR+1
   683     000A  082F               	movf	btemp+1,w
   684     000B  008E               	movwf	??_Global_ISR+2
   685     000C  2910               	ljmp	_Global_ISR
   686                           
   687                           	psect	text3
   688     0120                     __ptext3:	
   689 ;; *************** function _main__blinking *****************
   690 ;; Defined at:
   691 ;;		line 164 in file "main.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;		None
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, status,2, status,0
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMMON   BANK0
   705 ;;      Params:         0       0
   706 ;;      Locals:         0       0
   707 ;;      Temps:          0       0
   708 ;;      Totals:         0       0
   709 ;;Total ram usage:        0 bytes
   710 ;; Hardware stack levels used: 1
   711 ;; This function calls:
   712 ;;		Nothing
   713 ;; This function is called by:
   714 ;;		_main
   715 ;;		_Global_ISR
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719     0120                     _main__blinking:	
   720                           ;psect for function _main__blinking
   721                           
   722     0120                     i1l676:	
   723                           ;incstack = 0
   724                           ; Regs used in _main__blinking: [wreg+status,2+status,0]
   725                           
   726                           
   727                           ;main.c: 165:  *(&PORTA + (12 >> 3)) ^= 0x01 << (12 - ((12 >> 3) << 3));
   728     0120  3010               	movlw	16
   729     0121  1283               	bcf	3,5	;RP0=0, select bank0
   730     0122  0686               	xorwf	6,f	;volatile
   731     0123                     i1l678:
   732                           
   733                           ;main.c: 166:  TMR0 = (u8)(timer0__initial);
   734     0123  0821               	movf	_timer0__initial,w
   735     0124  0081               	movwf	1	;volatile
   736     0125                     i1l33:
   737     0125  0008               	return
   738     0126                     __end_of_main__blinking:
   739     0000                     ___latbits      equ	0
   740     0000                     fptotal         equ	0
   741     0002                     i1fptotal       equ	2
   742                           
   743                           	psect	functab
   744     0014                     __pfunctab:
   745     0000                     fpbase          equ	0
   746     0014                     fptable:
   747     0014  2814               	goto	fptable	;no entries
   748     0015                     __i1fptable:
   749     0015                     i1fptable:
   750     0015  00AF               	movwf	(btemp+1)& (0+127)
   751     0016  3000               	movlw	high i1fptable
   752     0017  008A               	movwf	10
   753     0018  082F               	movf	(btemp+1)& (0+127),w
   754     0019  0782               	addwf	2,f
   755     001A                     i1fpbase:
   756     001A  281A               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
   757     001B                     fp__main__blinking:
   758     001B  2920               	ljmp	_main__blinking
   759     001C                     __end_of__i1fptable:
   760     0007                     __size_of__i1fptable equ	__end_of__i1fptable-__i1fptable
   761     002E                     btemp           set	46	;btemp
   762     002E                     wtemp0          set	46
   763                           
   764                           	psect	config
   765                           
   766                           ;Config register CONFIG @ 0x2007
   767                           ;	Oscillator Selection bits
   768                           ;	FOSC = HS, HS oscillator
   769                           ;	Watchdog Timer
   770                           ;	WDTE = OFF, WDT disabled
   771                           ;	Power-up Timer Enable bit
   772                           ;	PWRTE = ON, Power-up Timer is enabled
   773                           ;	Code Protection bit
   774                           ;	CP = OFF, Code protection disabled
   775     2007                     	org	8199
   776     2007  3FF2               	dw	16370

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         0
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            34     21      24

Pointer List with Targets:

    ptr_timer0_isr	PTR FTN()void  size(1) Largest target is 1
		 -> main__blinking(), NULL(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Global_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___aldiv

Critical Paths under _Global_ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     302
                                             18 BANK0      3     3      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     302
                                              3 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Global_ISR                                           3     3      0       0
                                              0 BANK0      3     3      0
                                NULL *
                     _main__blinking *
 ---------------------------------------------------------------------------------
 (3) _main__blinking                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv

 _Global_ISR (ROOT)
   NULL(Fake) *
   _main__blinking *

Address spaces:
Name               Size   Autos  Total    Usage
BANK0               34     21      24     70.6%
BITBANK0            34      0       0      0.0%
COMMON               0      0       0      0.0%
BITCOMMON            0      0       0      0.0%
DATA                 0      0      24      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Dec  5 20:58:15 2024

                      pc 0002                       l44 00F4                       l45 00FF  
                     l47 010E                       l48 010E                      l201 002F  
                    l211 00B3                      l700 0062                      l710 0095  
                    l702 006B                      l704 007D                      l712 009B  
                    l714 00A0                      l706 008B                      l730 00B7  
                    l716 00AB                      l708 008C                      l740 00EC  
                    l732 00BA                      l750 0107                      l742 00F0  
                    l734 00BD                      l726 00B4                      l680 001C  
                    l752 010A                      l744 00F6                      l736 00C0  
                    l690 0040                      l682 001E                      l754 010C  
                    l746 00FC                      l738 00C2                      l692 0048  
                    l684 0022                      l756 010D                      l748 0101  
                    l694 0050                      l686 0033                      l696 0053  
                    l688 003E                      l698 005E                      _GIE 005F  
                    u200 0062                      u201 0061                      u220 007D  
                    u300 00FC                      u221 007C                      u301 00FB  
                    u215 0064                      u240 009B                      u160 0022  
                    u241 009A                      u225 0079                      u161 0021  
                    u250 00A0                      u170 0033                      u251 009F  
                    u235 008D                      u171 0032                      u180 0050  
                    u181 004F                      u280 00F0                      u281 00EF  
                    u290 00F4                      u274 00CE                      u195 0055  
                    u291 00F3                      u275 00CB                      _PSA 040B  
                   _T0IE 005D                     _T0IF 005A                     _T0CS 040D  
                   i1l33 0125                     i1l26 0117                     _TMR0 0001  
                   _main 00B4                     btemp 002E                     start 000D  
        _timer0__initial 0021           _ptr_timer0_isr 0023          __end_of___aldiv 00B4  
                  ?_main 000C                    i1l720 0110                    i1l722 0114  
                  i1l724 0116                    i1l676 0120                    i1l678 0123  
                  u26_20 0114                    u26_21 0113                    _PORTA 0005  
                  _TRISA 0085               _Global_ISR 0110                    fpbase 0000  
                  pclath 000A           _main__blinking 0120                    status 0003  
                  wtemp0 002E          __initialization 000E             __end_of_main 0110  
                 ??_main 001E   __end_of_main__blinking 0126               __i1fptable 0015  
              ??___aldiv 0017                   fptable 0014                   fptotal 0000  
                 saved_w 002E              ?_Global_ISR 000C          ?_main__blinking 000C  
__end_of__initialization 0012           __pcstackCOMMON 0000             __pidataBANK0 0126  
      _timer0__prescaler 0022               __pmaintext 00B4               __pintentry 0004  
                i1fpbase 001A                  ___aldiv 001C                  __ptext1 001C  
                __ptext2 0110                  __ptext3 0120      __size_of__i1fptable 0007  
       ___aldiv@dividend 0013     end_of_initialization 0012         ___aldiv@quotient 001A  
       ??_main__blinking 0000             ??_Global_ISR 000C       __end_of_Global_ISR 0120  
    start_initialization 000E              __pdataBANK0 0021       __end_of__i1fptable 001C  
              ___latbits 0000            __pcstackBANK0 000C                __pnvBANK0 0023  
              __pfunctab 0014                 ?___aldiv 000F          ___aldiv@divisor 000F  
      interrupt_function 0004          ___aldiv@counter 0018                 i1fptable 0015  
               i1fptotal 0002                 intlevel1 0014        fp__main__blinking 001B  
             _OPTION_REG 0081             ___aldiv@sign 0019  
