

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Jan 31 09:40:50 2024

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F886
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Version 2.40
    19                           ; Generated 17/11/2021 GMT
    20                           ; 
    21                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F886 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0000                     	;# 
    54     0001                     	;# 
    55     0002                     	;# 
    56     0003                     	;# 
    57     0004                     	;# 
    58     0005                     	;# 
    59     0006                     	;# 
    60     0007                     	;# 
    61     0009                     	;# 
    62     000A                     	;# 
    63     000B                     	;# 
    64     000C                     	;# 
    65     000D                     	;# 
    66     000E                     	;# 
    67     000E                     	;# 
    68     000F                     	;# 
    69     0010                     	;# 
    70     0011                     	;# 
    71     0012                     	;# 
    72     0013                     	;# 
    73     0014                     	;# 
    74     0015                     	;# 
    75     0015                     	;# 
    76     0016                     	;# 
    77     0017                     	;# 
    78     0018                     	;# 
    79     0019                     	;# 
    80     001A                     	;# 
    81     001B                     	;# 
    82     001B                     	;# 
    83     001C                     	;# 
    84     001D                     	;# 
    85     001E                     	;# 
    86     001F                     	;# 
    87     0081                     	;# 
    88     0085                     	;# 
    89     0086                     	;# 
    90     0087                     	;# 
    91     0089                     	;# 
    92     008C                     	;# 
    93     008D                     	;# 
    94     008E                     	;# 
    95     008F                     	;# 
    96     0090                     	;# 
    97     0091                     	;# 
    98     0092                     	;# 
    99     0093                     	;# 
   100     0093                     	;# 
   101     0093                     	;# 
   102     0094                     	;# 
   103     0095                     	;# 
   104     0096                     	;# 
   105     0097                     	;# 
   106     0098                     	;# 
   107     0099                     	;# 
   108     009A                     	;# 
   109     009B                     	;# 
   110     009C                     	;# 
   111     009D                     	;# 
   112     009E                     	;# 
   113     009F                     	;# 
   114     0105                     	;# 
   115     0107                     	;# 
   116     0108                     	;# 
   117     0109                     	;# 
   118     010C                     	;# 
   119     010C                     	;# 
   120     010D                     	;# 
   121     010E                     	;# 
   122     010F                     	;# 
   123     0185                     	;# 
   124     0187                     	;# 
   125     0188                     	;# 
   126     0189                     	;# 
   127     018C                     	;# 
   128     018D                     	;# 
   129     0000                     	;# 
   130     0001                     	;# 
   131     0002                     	;# 
   132     0003                     	;# 
   133     0004                     	;# 
   134     0005                     	;# 
   135     0006                     	;# 
   136     0007                     	;# 
   137     0009                     	;# 
   138     000A                     	;# 
   139     000B                     	;# 
   140     000C                     	;# 
   141     000D                     	;# 
   142     000E                     	;# 
   143     000E                     	;# 
   144     000F                     	;# 
   145     0010                     	;# 
   146     0011                     	;# 
   147     0012                     	;# 
   148     0013                     	;# 
   149     0014                     	;# 
   150     0015                     	;# 
   151     0015                     	;# 
   152     0016                     	;# 
   153     0017                     	;# 
   154     0018                     	;# 
   155     0019                     	;# 
   156     001A                     	;# 
   157     001B                     	;# 
   158     001B                     	;# 
   159     001C                     	;# 
   160     001D                     	;# 
   161     001E                     	;# 
   162     001F                     	;# 
   163     0081                     	;# 
   164     0085                     	;# 
   165     0086                     	;# 
   166     0087                     	;# 
   167     0089                     	;# 
   168     008C                     	;# 
   169     008D                     	;# 
   170     008E                     	;# 
   171     008F                     	;# 
   172     0090                     	;# 
   173     0091                     	;# 
   174     0092                     	;# 
   175     0093                     	;# 
   176     0093                     	;# 
   177     0093                     	;# 
   178     0094                     	;# 
   179     0095                     	;# 
   180     0096                     	;# 
   181     0097                     	;# 
   182     0098                     	;# 
   183     0099                     	;# 
   184     009A                     	;# 
   185     009B                     	;# 
   186     009C                     	;# 
   187     009D                     	;# 
   188     009E                     	;# 
   189     009F                     	;# 
   190     0105                     	;# 
   191     0107                     	;# 
   192     0108                     	;# 
   193     0109                     	;# 
   194     010C                     	;# 
   195     010C                     	;# 
   196     010D                     	;# 
   197     010E                     	;# 
   198     010F                     	;# 
   199     0185                     	;# 
   200     0187                     	;# 
   201     0188                     	;# 
   202     0189                     	;# 
   203     018C                     	;# 
   204     018D                     	;# 
   205                           
   206                           	psect	strings
   207     0003                     __pstrings:
   208     0003                     stringtab:
   209     0003                     __stringtab:
   210     0003                     stringcode:	
   211                           ;	String table - string pointers are 1 byte each
   212                           
   213     0003                     stringdir:
   214     0003  3000               	movlw	high stringdir
   215     0004  008A               	movwf	10
   216     0005  0804               	movf	4,w
   217     0006  0A84               	incf	4,f
   218     0007  0782               	addwf	2,f
   219     0008                     __stringbase:
   220     0008  3400               	retlw	0
   221     0009                     __end_of__stringtab:
   222     0009                     _dpowers:
   223     0009  3401               	retlw	1
   224     000A  3400               	retlw	0
   225     000B  340A               	retlw	10
   226     000C  3400               	retlw	0
   227     000D  3464               	retlw	100
   228     000E  3400               	retlw	0
   229     000F  34E8               	retlw	232
   230     0010  3403               	retlw	3
   231     0011  3410               	retlw	16
   232     0012  3427               	retlw	39
   233     0013                     __end_of_dpowers:
   234     0019                     _TXREG	set	25
   235     0018                     _RCSTAbits	set	24
   236     001F                     _ADCON0	set	31
   237     001E                     _ADRESH	set	30
   238     001F                     _ADCON0bits	set	31
   239     0064                     _TXIF	set	100
   240     0098                     _TXSTAbits	set	152
   241     0099                     _SPBRG	set	153
   242     009F                     _ADCON1	set	159
   243     009E                     _ADRESL	set	158
   244     0013                     STR_1:
   245     0013  3441               	retlw	65	;'A'
   246     0014  3444               	retlw	68	;'D'
   247     0015  3443               	retlw	67	;'C'
   248     0016  3420               	retlw	32	;' '
   249     0017  3443               	retlw	67	;'C'
   250     0018  3448               	retlw	72	;'H'
   251     0019  3430               	retlw	48	;'0'
   252     001A  343A               	retlw	58	;':'
   253     001B  3420               	retlw	32	;' '
   254     001C  3425               	retlw	37	;'%'
   255     001D  3475               	retlw	117	;'u'
   256     001E  340D               	retlw	13
   257     001F  340A               	retlw	10
   258     0020  3400               	retlw	0
   259                           
   260                           	psect	cinit
   261     07F7                     start_initialization:	
   262                           ; #config settings
   263                           
   264     07F7                     __initialization:
   265                           
   266                           ; Clear objects allocated to BANK0
   267     07F7  1283               	bcf	3,5	;RP0=0, select bank0
   268     07F8  1303               	bcf	3,6	;RP1=0, select bank0
   269     07F9  01B3               	clrf	__pbssBANK0& (0+127)
   270     07FA  01B4               	clrf	(__pbssBANK0+1)& (0+127)
   271     07FB  01B5               	clrf	(__pbssBANK0+2)& (0+127)
   272     07FC                     end_of_initialization:	
   273                           ;End of C runtime variable initialization code
   274                           
   275     07FC                     __end_of__initialization:
   276     07FC  0183               	clrf	3
   277     07FD  120A  118A  2ECC   	ljmp	_main	;jump to C main() function
   278                           
   279                           	psect	bssBANK0
   280     0033                     __pbssBANK0:
   281     0033                     _adc:
   282     0033                     	ds	2
   283     0035                     _caracteres:
   284     0035                     	ds	1
   285                           
   286                           	psect	cstackCOMMON
   287     0070                     __pcstackCOMMON:
   288     0070                     ?_main:
   289     0070                     ?_adc_reading:	
   290                           ; 1 bytes @ 0x0
   291                           
   292     0070                     ?___lwdiv:	
   293                           ; 2 bytes @ 0x0
   294                           
   295     0070                     ___lwdiv@divisor:	
   296                           ; 2 bytes @ 0x0
   297                           
   298                           
   299                           ; 2 bytes @ 0x0
   300     0070                     	ds	2
   301     0072                     ??_adc_reading:
   302     0072                     ___lwdiv@dividend:	
   303                           ; 1 bytes @ 0x2
   304                           
   305                           
   306                           ; 2 bytes @ 0x2
   307     0072                     	ds	2
   308     0074                     ??___lwdiv:
   309                           
   310                           ; 1 bytes @ 0x4
   311     0074                     	ds	1
   312     0075                     ___lwdiv@quotient:
   313                           
   314                           ; 2 bytes @ 0x5
   315     0075                     	ds	2
   316     0077                     ___lwdiv@counter:
   317                           
   318                           ; 1 bytes @ 0x7
   319     0077                     	ds	1
   320     0078                     ?___lwmod:
   321     0078                     ___lwmod@divisor:	
   322                           ; 2 bytes @ 0x8
   323                           
   324                           
   325                           ; 2 bytes @ 0x8
   326     0078                     	ds	2
   327     007A                     ___lwmod@dividend:
   328                           
   329                           ; 2 bytes @ 0xA
   330     007A                     	ds	2
   331     007C                     ??___lwmod:
   332                           
   333                           ; 1 bytes @ 0xC
   334     007C                     	ds	1
   335     007D                     ___lwmod@counter:
   336                           
   337                           ; 1 bytes @ 0xD
   338     007D                     	ds	1
   339                           
   340                           	psect	cstackBANK0
   341     0020                     __pcstackBANK0:
   342     0020                     ?_sprintf:
   343     0020                     sprintf@f:	
   344                           ; 2 bytes @ 0x0
   345                           
   346                           
   347                           ; 1 bytes @ 0x0
   348     0020                     	ds	3
   349     0023                     ??_sprintf:
   350                           
   351                           ; 1 bytes @ 0x3
   352     0023                     	ds	3
   353     0026                     sprintf@flag:
   354                           
   355                           ; 1 bytes @ 0x6
   356     0026                     	ds	1
   357     0027                     sprintf@ap:
   358                           
   359                           ; 1 bytes @ 0x7
   360     0027                     	ds	1
   361     0028                     sprintf@val:
   362                           
   363                           ; 2 bytes @ 0x8
   364     0028                     	ds	2
   365     002A                     sprintf@prec:
   366                           
   367                           ; 1 bytes @ 0xA
   368     002A                     	ds	1
   369     002B                     sprintf@sp:
   370                           
   371                           ; 1 bytes @ 0xB
   372     002B                     	ds	1
   373     002C                     sprintf@c:
   374                           
   375                           ; 1 bytes @ 0xC
   376     002C                     	ds	1
   377     002D                     ??_main:
   378                           
   379                           ; 1 bytes @ 0xD
   380     002D                     	ds	3
   381     0030                     main@i:
   382                           
   383                           ; 2 bytes @ 0x10
   384     0030                     	ds	2
   385     0032                     main@caracter:
   386                           
   387                           ; 1 bytes @ 0x12
   388     0032                     	ds	1
   389                           
   390                           	psect	maintext
   391     06CC                     __pmaintext:	
   392 ;;
   393 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   394 ;;
   395 ;; *************** function _main *****************
   396 ;; Defined at:
   397 ;;		line 29 in file "UART.c"
   398 ;; Parameters:    Size  Location     Type
   399 ;;		None
   400 ;; Auto vars:     Size  Location     Type
   401 ;;  i               2   16[BANK0 ] int 
   402 ;;  caracter        1   18[BANK0 ] unsigned char 
   403 ;; Return value:  Size  Location     Type
   404 ;;                  1    wreg      void 
   405 ;; Registers used:
   406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   407 ;; Tracked objects:
   408 ;;		On entry : B00/0
   409 ;;		On exit  : 0/0
   410 ;;		Unchanged: 0/0
   411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   412 ;;      Params:         0       0       0       0       0
   413 ;;      Locals:         0       3       0       0       0
   414 ;;      Temps:          0       3       0       0       0
   415 ;;      Totals:         0       6       0       0       0
   416 ;;Total ram usage:        6 bytes
   417 ;; Hardware stack levels required when called: 2
   418 ;; This function calls:
   419 ;;		_adc_reading
   420 ;;		_sprintf
   421 ;; This function is called by:
   422 ;;		Startup code after reset
   423 ;; This function uses a non-reentrant model
   424 ;;
   425                           
   426     06CC                     _main:	
   427                           ;psect for function _main
   428                           
   429     06CC                     l927:	
   430                           ;incstack = 0
   431                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   432                           
   433                           
   434                           ;UART.c: 31:     ADCON1 = 0b10000000; ADCON0 = 0b11001000; ADCON0bits.ADON = 1;
   435     06CC  3080               	movlw	128
   436     06CD  1683               	bsf	3,5	;RP0=1, select bank1
   437     06CE  1303               	bcf	3,6	;RP1=0, select bank1
   438     06CF  009F               	movwf	31	;volatile
   439     06D0  30C8               	movlw	200
   440     06D1  1283               	bcf	3,5	;RP0=0, select bank0
   441     06D2  1303               	bcf	3,6	;RP1=0, select bank0
   442     06D3  009F               	movwf	31	;volatile
   443     06D4                     l929:
   444     06D4  141F               	bsf	31,0	;volatile
   445                           
   446                           ;UART.c: 32:     SPBRG = 51; TXSTAbits.SYNC = 0; TXSTAbits.BRGH = 1; RCSTAbits.SPEN = 1;
      +                           TXSTAbits.TXEN = 1; RCSTAbits.CREN = 1; TXSTAbits.TX9 = 0;;
   447     06D5  3033               	movlw	51
   448     06D6  1683               	bsf	3,5	;RP0=1, select bank1
   449     06D7  1303               	bcf	3,6	;RP1=0, select bank1
   450     06D8  0099               	movwf	25	;volatile
   451     06D9                     l931:
   452     06D9  1218               	bcf	24,4	;volatile
   453     06DA                     l933:
   454     06DA  1518               	bsf	24,2	;volatile
   455     06DB                     l935:
   456     06DB  1283               	bcf	3,5	;RP0=0, select bank0
   457     06DC  1303               	bcf	3,6	;RP1=0, select bank0
   458     06DD  1798               	bsf	24,7	;volatile
   459     06DE                     l937:
   460     06DE  1683               	bsf	3,5	;RP0=1, select bank1
   461     06DF  1303               	bcf	3,6	;RP1=0, select bank1
   462     06E0  1698               	bsf	24,5	;volatile
   463     06E1                     l939:
   464     06E1  1283               	bcf	3,5	;RP0=0, select bank0
   465     06E2  1303               	bcf	3,6	;RP1=0, select bank0
   466     06E3  1618               	bsf	24,4	;volatile
   467     06E4                     l941:
   468     06E4  1683               	bsf	3,5	;RP0=1, select bank1
   469     06E5  1303               	bcf	3,6	;RP1=0, select bank1
   470     06E6  1318               	bcf	24,6	;volatile
   471     06E7                     l943:
   472                           
   473                           ;UART.c: 36:         ADCON0bits.CHS = 0; adc_reading();
   474     06E7  30C3               	movlw	-61
   475     06E8  1283               	bcf	3,5	;RP0=0, select bank0
   476     06E9  1303               	bcf	3,6	;RP1=0, select bank0
   477     06EA  059F               	andwf	31,f	;volatile
   478     06EB                     l945:
   479     06EB  120A  118A  2640  120A  118A  	fcall	_adc_reading
   480                           
   481                           ;UART.c: 38:         adc = adc_reading();
   482     06F0  120A  118A  2640  120A  118A  	fcall	_adc_reading
   483     06F5  0871               	movf	?_adc_reading+1,w
   484     06F6  1283               	bcf	3,5	;RP0=0, select bank0
   485     06F7  1303               	bcf	3,6	;RP1=0, select bank0
   486     06F8  00B4               	movwf	_adc+1
   487     06F9  0870               	movf	?_adc_reading,w
   488     06FA  00B3               	movwf	_adc
   489     06FB                     l947:
   490                           
   491                           ;UART.c: 40:         sprintf(caracteres, "ADC CH0: %u\r\n", adc);
   492     06FB  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   493     06FC  00A0               	movwf	sprintf@f
   494     06FD  0834               	movf	_adc+1,w
   495     06FE  00A2               	movwf	?_sprintf+2
   496     06FF  0833               	movf	_adc,w
   497     0700  00A1               	movwf	?_sprintf+1
   498     0701  3035               	movlw	(low (_caracteres| 0))& (0+255)
   499     0702  120A  118A  2736  120A  118A  	fcall	_sprintf
   500     0707                     l949:
   501                           
   502                           ;UART.c: 41:         { char caracter; for (int i = 0; (caracter = (caracteres)[i]); ++i)
      +                           { while (!TXIF); TXREG = caracter; } };
   503     0707  1283               	bcf	3,5	;RP0=0, select bank0
   504     0708  1303               	bcf	3,6	;RP1=0, select bank0
   505     0709  01B0               	clrf	main@i
   506     070A  01B1               	clrf	main@i+1
   507     070B  2F18               	goto	l953
   508     070C                     l42:
   509     070C  1E0C               	btfss	12,4	;volatile
   510     070D  2F0F               	goto	u411
   511     070E  2F10               	goto	u410
   512     070F                     u411:
   513     070F  2F0C               	goto	l42
   514     0710                     u410:
   515     0710                     l951:
   516     0710  0832               	movf	main@caracter,w
   517     0711  0099               	movwf	25	;volatile
   518     0712  3001               	movlw	1
   519     0713  07B0               	addwf	main@i,f
   520     0714  1803               	skipnc
   521     0715  0AB1               	incf	main@i+1,f
   522     0716  3000               	movlw	0
   523     0717  07B1               	addwf	main@i+1,f
   524     0718                     l953:
   525     0718  0830               	movf	main@i,w
   526     0719  3E35               	addlw	(low (_caracteres| 0))& (0+255)
   527     071A  0084               	movwf	4
   528     071B  1383               	bcf	3,7	;select IRP bank0
   529     071C  0800               	movf	0,w
   530     071D  00B2               	movwf	main@caracter
   531     071E  0832               	movf	main@caracter,w
   532     071F  1D03               	btfss	3,2
   533     0720  2F22               	goto	u421
   534     0721  2F23               	goto	u420
   535     0722                     u421:
   536     0722  2F0C               	goto	l42
   537     0723                     u420:
   538     0723                     l955:
   539                           
   540                           ;UART.c: 42:         _delay((unsigned long)((200)*(8000000/4000.0)));
   541     0723  3003               	movlw	3
   542     0724  1283               	bcf	3,5	;RP0=0, select bank0
   543     0725  1303               	bcf	3,6	;RP1=0, select bank0
   544     0726  00AF               	movwf	??_main+2
   545     0727  3008               	movlw	8
   546     0728  00AE               	movwf	??_main+1
   547     0729  3076               	movlw	118
   548     072A  00AD               	movwf	??_main
   549     072B                     u437:
   550     072B  0BAD               	decfsz	??_main,f
   551     072C  2F2B               	goto	u437
   552     072D  0BAE               	decfsz	??_main+1,f
   553     072E  2F2B               	goto	u437
   554     072F  0BAF               	decfsz	??_main+2,f
   555     0730  2F2B               	goto	u437
   556     0731  0000               	nop
   557     0732  2EE7               	goto	l943
   558     0733  120A  118A  2800   	ljmp	start
   559     0736                     __end_of_main:
   560                           
   561                           	psect	text1
   562     0736                     __ptext1:	
   563 ;; *************** function _sprintf *****************
   564 ;; Defined at:
   565 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;  sp              1    wreg     PTR unsigned char 
   568 ;;		 -> caracteres(1), 
   569 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   570 ;;		 -> STR_1(14), 
   571 ;; Auto vars:     Size  Location     Type
   572 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   573 ;;		 -> caracteres(1), 
   574 ;;  tmpval          4    0        struct .
   575 ;;  val             2    8[BANK0 ] unsigned int 
   576 ;;  cp              2    0        PTR const unsigned char 
   577 ;;  len             2    0        unsigned int 
   578 ;;  c               1   12[BANK0 ] unsigned char 
   579 ;;  prec            1   10[BANK0 ] char 
   580 ;;  ap              1    7[BANK0 ] PTR void [1]
   581 ;;		 -> ?_sprintf(2), 
   582 ;;  flag            1    6[BANK0 ] unsigned char 
   583 ;; Return value:  Size  Location     Type
   584 ;;                  2    0[BANK0 ] int 
   585 ;; Registers used:
   586 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   592 ;;      Params:         0       3       0       0       0
   593 ;;      Locals:         0       7       0       0       0
   594 ;;      Temps:          0       3       0       0       0
   595 ;;      Totals:         0      13       0       0       0
   596 ;;Total ram usage:       13 bytes
   597 ;; Hardware stack levels used: 1
   598 ;; Hardware stack levels required when called: 1
   599 ;; This function calls:
   600 ;;		___lwdiv
   601 ;;		___lwmod
   602 ;; This function is called by:
   603 ;;		_main
   604 ;; This function uses a non-reentrant model
   605 ;;
   606                           
   607     0736                     _sprintf:	
   608                           ;psect for function _sprintf
   609                           
   610                           
   611                           ;incstack = 0
   612                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   613                           ;sprintf@sp stored from wreg
   614     0736  1283               	bcf	3,5	;RP0=0, select bank0
   615     0737  1303               	bcf	3,6	;RP1=0, select bank0
   616     0738  00AB               	movwf	sprintf@sp
   617     0739                     l875:
   618                           
   619                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   620     0739  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   621     073A  00A7               	movwf	sprintf@ap
   622                           
   623                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   624     073B  2FE2               	goto	l917
   625     073C                     l877:
   626                           
   627                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   628     073C  3025               	movlw	37
   629     073D  062C               	xorwf	sprintf@c,w
   630     073E  1903               	btfsc	3,2
   631     073F  2F41               	goto	u361
   632     0740  2F42               	goto	u360
   633     0741                     u361:
   634     0741  2F4C               	goto	l883
   635     0742                     u360:
   636     0742                     l879:
   637                           
   638                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   639     0742  082B               	movf	sprintf@sp,w
   640     0743  0084               	movwf	4
   641     0744  082C               	movf	sprintf@c,w
   642     0745  1383               	bcf	3,7	;select IRP bank0
   643     0746  0080               	movwf	0
   644     0747                     l881:
   645     0747  3001               	movlw	1
   646     0748  00A3               	movwf	??_sprintf
   647     0749  0823               	movf	??_sprintf,w
   648     074A  07AB               	addwf	sprintf@sp,f
   649                           
   650                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
   651     074B  2FE2               	goto	l917
   652     074C                     l883:
   653                           
   654                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   655     074C  01A6               	clrf	sprintf@flag
   656                           
   657                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   658     074D  2F53               	goto	l889
   659     074E                     l885:
   660                           
   661                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 844:    flag |= 0
      +                          xC0;
   662     074E  30C0               	movlw	192
   663     074F  00A3               	movwf	??_sprintf
   664     0750  0823               	movf	??_sprintf,w
   665     0751  04A6               	iorwf	sprintf@flag,f
   666                           
   667                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 845:    break;
   668     0752  2F6D               	goto	l891
   669     0753                     l889:
   670     0753  3001               	movlw	1
   671     0754  07A0               	addwf	sprintf@f,f
   672     0755  30FF               	movlw	-1
   673     0756  0720               	addwf	sprintf@f,w
   674     0757  0084               	movwf	4
   675     0758  120A  118A  2003  120A  118A  	fcall	stringdir
   676     075D  00AC               	movwf	sprintf@c
   677     075E  00A3               	movwf	??_sprintf
   678     075F  01A4               	clrf	??_sprintf+1
   679                           
   680                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   681                           ; Switch size 1, requested type "simple"
   682                           ; Number of cases is 1, Range of values is 0 to 0
   683                           ; switch strategies available:
   684                           ; Name         Instructions Cycles
   685                           ; simple_byte            4     3 (average)
   686                           ; direct_byte           11     8 (fixed)
   687                           ; jumptable            260     6 (fixed)
   688                           ;	Chosen strategy is simple_byte
   689     0760  0824               	movf	??_sprintf+1,w
   690     0761  3A00               	xorlw	0	; case 0
   691     0762  1903               	skipnz
   692     0763  2F65               	goto	l977
   693     0764  2FE2               	goto	l917
   694     0765                     l977:
   695                           
   696                           ; Switch size 1, requested type "simple"
   697                           ; Number of cases is 2, Range of values is 0 to 117
   698                           ; switch strategies available:
   699                           ; Name         Instructions Cycles
   700                           ; simple_byte            7     4 (average)
   701                           ; jumptable            260     6 (fixed)
   702                           ;	Chosen strategy is simple_byte
   703     0765  0823               	movf	??_sprintf,w
   704     0766  3A00               	xorlw	0	; case 0
   705     0767  1903               	skipnz
   706     0768  2FF2               	goto	l919
   707     0769  3A75               	xorlw	117	; case 117
   708     076A  1903               	skipnz
   709     076B  2F4E               	goto	l885
   710     076C  2FE2               	goto	l917
   711     076D                     l891:
   712                           
   713                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1299:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1312:     val = (*(unsign
      +                          ed *)__va_arg((*(unsigned **)ap), (unsigned)0));
   714     076D  0827               	movf	sprintf@ap,w
   715     076E  0084               	movwf	4
   716     076F  1383               	bcf	3,7	;select IRP bank0
   717     0770  0800               	movf	0,w
   718     0771  00A8               	movwf	sprintf@val
   719     0772  0A84               	incf	4,f
   720     0773  0800               	movf	0,w
   721     0774  00A9               	movwf	sprintf@val+1
   722     0775                     l893:
   723     0775  3002               	movlw	2
   724     0776  00A3               	movwf	??_sprintf
   725     0777  0823               	movf	??_sprintf,w
   726     0778  07A7               	addwf	sprintf@ap,f
   727     0779                     l895:
   728                           
   729                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1313:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
   730     0779  01AC               	clrf	sprintf@c
   731     077A  0AAC               	incf	sprintf@c,f
   732     077B                     l901:
   733                           
   734                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
   735     077B  082C               	movf	sprintf@c,w
   736     077C  00A3               	movwf	??_sprintf
   737     077D  0723               	addwf	??_sprintf,w
   738     077E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   739     077F  0084               	movwf	4
   740     0780  120A  118A  2003  120A  118A  	fcall	stringdir
   741     0785  00A4               	movwf	??_sprintf+1
   742     0786  120A  118A  2003  120A  118A  	fcall	stringdir
   743     078B  00A5               	movwf	??_sprintf+2
   744     078C  0825               	movf	??_sprintf+2,w
   745     078D  0229               	subwf	sprintf@val+1,w
   746     078E  1D03               	skipz
   747     078F  2F92               	goto	u375
   748     0790  0824               	movf	??_sprintf+1,w
   749     0791  0228               	subwf	sprintf@val,w
   750     0792                     u375:
   751     0792  1803               	skipnc
   752     0793  2F95               	goto	u371
   753     0794  2F96               	goto	u370
   754     0795                     u371:
   755     0795  2F97               	goto	l905
   756     0796                     u370:
   757     0796  2FA1               	goto	l907
   758     0797                     l905:
   759     0797  3001               	movlw	1
   760     0798  00A3               	movwf	??_sprintf
   761     0799  0823               	movf	??_sprintf,w
   762     079A  07AC               	addwf	sprintf@c,f
   763     079B  3005               	movlw	5
   764     079C  062C               	xorwf	sprintf@c,w
   765     079D  1D03               	btfss	3,2
   766     079E  2FA0               	goto	u381
   767     079F  2FA1               	goto	u380
   768     07A0                     u381:
   769     07A0  2F7B               	goto	l901
   770     07A1                     u380:
   771     07A1                     l907:
   772                           
   773                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };C:\Program File
      +                          s\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   774     07A1  082C               	movf	sprintf@c,w
   775     07A2  00AA               	movwf	sprintf@prec
   776                           
   777                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   778     07A3  2FD9               	goto	l915
   779     07A4                     l909:
   780                           
   781                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
   782     07A4  300A               	movlw	10
   783     07A5  00F8               	movwf	___lwmod@divisor
   784     07A6  3000               	movlw	0
   785     07A7  00F9               	movwf	___lwmod@divisor+1
   786     07A8  082A               	movf	sprintf@prec,w
   787     07A9  00A3               	movwf	??_sprintf
   788     07AA  0723               	addwf	??_sprintf,w
   789     07AB  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   790     07AC  0084               	movwf	4
   791     07AD  120A  118A  2003  120A  118A  	fcall	stringdir
   792     07B2  00F0               	movwf	___lwdiv@divisor
   793     07B3  120A  118A  2003  120A  118A  	fcall	stringdir
   794     07B8  00F1               	movwf	___lwdiv@divisor+1
   795     07B9  0829               	movf	sprintf@val+1,w
   796     07BA  00F3               	movwf	___lwdiv@dividend+1
   797     07BB  0828               	movf	sprintf@val,w
   798     07BC  00F2               	movwf	___lwdiv@dividend
   799     07BD  120A  118A  2688  120A  118A  	fcall	___lwdiv
   800     07C2  0871               	movf	?___lwdiv+1,w
   801     07C3  00FB               	movwf	___lwmod@dividend+1
   802     07C4  0870               	movf	?___lwdiv,w
   803     07C5  00FA               	movwf	___lwmod@dividend
   804     07C6  120A  118A  264E  120A  118A  	fcall	___lwmod
   805     07CB  0878               	movf	?___lwmod,w
   806     07CC  3E30               	addlw	48
   807     07CD  1283               	bcf	3,5	;RP0=0, select bank0
   808     07CE  1303               	bcf	3,6	;RP1=0, select bank0
   809     07CF  00AC               	movwf	sprintf@c
   810     07D0                     l911:
   811                           
   812                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
   813     07D0  082B               	movf	sprintf@sp,w
   814     07D1  0084               	movwf	4
   815     07D2  082C               	movf	sprintf@c,w
   816     07D3  1383               	bcf	3,7	;select IRP bank0
   817     07D4  0080               	movwf	0
   818     07D5                     l913:
   819     07D5  3001               	movlw	1
   820     07D6  00A3               	movwf	??_sprintf
   821     07D7  0823               	movf	??_sprintf,w
   822     07D8  07AB               	addwf	sprintf@sp,f
   823     07D9                     l915:
   824                           
   825                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   826     07D9  30FF               	movlw	255
   827     07DA  00A3               	movwf	??_sprintf
   828     07DB  0823               	movf	??_sprintf,w
   829     07DC  07AA               	addwf	sprintf@prec,f
   830     07DD  0A2A               	incf	sprintf@prec,w
   831     07DE  1D03               	btfss	3,2
   832     07DF  2FE1               	goto	u391
   833     07E0  2FE2               	goto	u390
   834     07E1                     u391:
   835     07E1  2FA4               	goto	l909
   836     07E2                     u390:
   837     07E2                     l917:
   838                           
   839                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   840     07E2  3001               	movlw	1
   841     07E3  07A0               	addwf	sprintf@f,f
   842     07E4  30FF               	movlw	-1
   843     07E5  0720               	addwf	sprintf@f,w
   844     07E6  0084               	movwf	4
   845     07E7  120A  118A  2003  120A  118A  	fcall	stringdir
   846     07EC  00AC               	movwf	sprintf@c
   847     07ED  082C               	movf	sprintf@c,w
   848     07EE  1D03               	btfss	3,2
   849     07EF  2FF1               	goto	u401
   850     07F0  2FF2               	goto	u400
   851     07F1                     u401:
   852     07F1  2F3C               	goto	l877
   853     07F2                     u400:
   854     07F2                     l919:
   855                           
   856                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
   857     07F2  082B               	movf	sprintf@sp,w
   858     07F3  0084               	movwf	4
   859     07F4  1383               	bcf	3,7	;select IRP bank0
   860     07F5  0180               	clrf	0
   861     07F6                     l155:
   862     07F6  0008               	return
   863     07F7                     __end_of_sprintf:
   864                           
   865                           	psect	text2
   866     064E                     __ptext2:	
   867 ;; *************** function ___lwmod *****************
   868 ;; Defined at:
   869 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;  divisor         2    8[COMMON] unsigned int 
   872 ;;  dividend        2   10[COMMON] unsigned int 
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  counter         1   13[COMMON] unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  2    8[COMMON] unsigned int 
   877 ;; Registers used:
   878 ;;		wreg, status,2, status,0
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   884 ;;      Params:         4       0       0       0       0
   885 ;;      Locals:         1       0       0       0       0
   886 ;;      Temps:          1       0       0       0       0
   887 ;;      Totals:         6       0       0       0       0
   888 ;;Total ram usage:        6 bytes
   889 ;; Hardware stack levels used: 1
   890 ;; This function calls:
   891 ;;		Nothing
   892 ;; This function is called by:
   893 ;;		_sprintf
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897     064E                     ___lwmod:	
   898                           ;psect for function ___lwmod
   899                           
   900     064E                     l847:	
   901                           ;incstack = 0
   902                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   903                           
   904     064E  0878               	movf	___lwmod@divisor,w
   905     064F  0479               	iorwf	___lwmod@divisor+1,w
   906     0650  1903               	btfsc	3,2
   907     0651  2E53               	goto	u291
   908     0652  2E54               	goto	u290
   909     0653                     u291:
   910     0653  2E83               	goto	l865
   911     0654                     u290:
   912     0654                     l849:
   913     0654  01FD               	clrf	___lwmod@counter
   914     0655  0AFD               	incf	___lwmod@counter,f
   915     0656  2E62               	goto	l855
   916     0657                     l851:
   917     0657  3001               	movlw	1
   918     0658                     u305:
   919     0658  1003               	clrc
   920     0659  0DF8               	rlf	___lwmod@divisor,f
   921     065A  0DF9               	rlf	___lwmod@divisor+1,f
   922     065B  3EFF               	addlw	-1
   923     065C  1D03               	skipz
   924     065D  2E58               	goto	u305
   925     065E                     l853:
   926     065E  3001               	movlw	1
   927     065F  00FC               	movwf	??___lwmod
   928     0660  087C               	movf	??___lwmod,w
   929     0661  07FD               	addwf	___lwmod@counter,f
   930     0662                     l855:
   931     0662  1FF9               	btfss	___lwmod@divisor+1,7
   932     0663  2E65               	goto	u311
   933     0664  2E66               	goto	u310
   934     0665                     u311:
   935     0665  2E57               	goto	l851
   936     0666                     u310:
   937     0666                     l857:
   938     0666  0879               	movf	___lwmod@divisor+1,w
   939     0667  027B               	subwf	___lwmod@dividend+1,w
   940     0668  1D03               	skipz
   941     0669  2E6C               	goto	u325
   942     066A  0878               	movf	___lwmod@divisor,w
   943     066B  027A               	subwf	___lwmod@dividend,w
   944     066C                     u325:
   945     066C  1C03               	skipc
   946     066D  2E6F               	goto	u321
   947     066E  2E70               	goto	u320
   948     066F                     u321:
   949     066F  2E76               	goto	l861
   950     0670                     u320:
   951     0670                     l859:
   952     0670  0878               	movf	___lwmod@divisor,w
   953     0671  02FA               	subwf	___lwmod@dividend,f
   954     0672  0879               	movf	___lwmod@divisor+1,w
   955     0673  1C03               	skipc
   956     0674  03FB               	decf	___lwmod@dividend+1,f
   957     0675  02FB               	subwf	___lwmod@dividend+1,f
   958     0676                     l861:
   959     0676  3001               	movlw	1
   960     0677                     u335:
   961     0677  1003               	clrc
   962     0678  0CF9               	rrf	___lwmod@divisor+1,f
   963     0679  0CF8               	rrf	___lwmod@divisor,f
   964     067A  3EFF               	addlw	-1
   965     067B  1D03               	skipz
   966     067C  2E77               	goto	u335
   967     067D                     l863:
   968     067D  3001               	movlw	1
   969     067E  02FD               	subwf	___lwmod@counter,f
   970     067F  1D03               	btfss	3,2
   971     0680  2E82               	goto	u341
   972     0681  2E83               	goto	u340
   973     0682                     u341:
   974     0682  2E66               	goto	l857
   975     0683                     u340:
   976     0683                     l865:
   977     0683  087B               	movf	___lwmod@dividend+1,w
   978     0684  00F9               	movwf	?___lwmod+1
   979     0685  087A               	movf	___lwmod@dividend,w
   980     0686  00F8               	movwf	?___lwmod
   981     0687                     l441:
   982     0687  0008               	return
   983     0688                     __end_of___lwmod:
   984                           
   985                           	psect	text3
   986     0688                     __ptext3:	
   987 ;; *************** function ___lwdiv *****************
   988 ;; Defined at:
   989 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;  divisor         2    0[COMMON] unsigned int 
   992 ;;  dividend        2    2[COMMON] unsigned int 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  quotient        2    5[COMMON] unsigned int 
   995 ;;  counter         1    7[COMMON] unsigned char 
   996 ;; Return value:  Size  Location     Type
   997 ;;                  2    0[COMMON] unsigned int 
   998 ;; Registers used:
   999 ;;		wreg, status,2, status,0
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/0
  1002 ;;		On exit  : 0/0
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1005 ;;      Params:         4       0       0       0       0
  1006 ;;      Locals:         3       0       0       0       0
  1007 ;;      Temps:          1       0       0       0       0
  1008 ;;      Totals:         8       0       0       0       0
  1009 ;;Total ram usage:        8 bytes
  1010 ;; Hardware stack levels used: 1
  1011 ;; This function calls:
  1012 ;;		Nothing
  1013 ;; This function is called by:
  1014 ;;		_sprintf
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018     0688                     ___lwdiv:	
  1019                           ;psect for function ___lwdiv
  1020                           
  1021     0688                     l821:	
  1022                           ;incstack = 0
  1023                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1024                           
  1025     0688  01F5               	clrf	___lwdiv@quotient
  1026     0689  01F6               	clrf	___lwdiv@quotient+1
  1027     068A                     l823:
  1028     068A  0870               	movf	___lwdiv@divisor,w
  1029     068B  0471               	iorwf	___lwdiv@divisor+1,w
  1030     068C  1903               	btfsc	3,2
  1031     068D  2E8F               	goto	u221
  1032     068E  2E90               	goto	u220
  1033     068F                     u221:
  1034     068F  2EC7               	goto	l843
  1035     0690                     u220:
  1036     0690                     l825:
  1037     0690  01F7               	clrf	___lwdiv@counter
  1038     0691  0AF7               	incf	___lwdiv@counter,f
  1039     0692  2E9E               	goto	l831
  1040     0693                     l827:
  1041     0693  3001               	movlw	1
  1042     0694                     u235:
  1043     0694  1003               	clrc
  1044     0695  0DF0               	rlf	___lwdiv@divisor,f
  1045     0696  0DF1               	rlf	___lwdiv@divisor+1,f
  1046     0697  3EFF               	addlw	-1
  1047     0698  1D03               	skipz
  1048     0699  2E94               	goto	u235
  1049     069A                     l829:
  1050     069A  3001               	movlw	1
  1051     069B  00F4               	movwf	??___lwdiv
  1052     069C  0874               	movf	??___lwdiv,w
  1053     069D  07F7               	addwf	___lwdiv@counter,f
  1054     069E                     l831:
  1055     069E  1FF1               	btfss	___lwdiv@divisor+1,7
  1056     069F  2EA1               	goto	u241
  1057     06A0  2EA2               	goto	u240
  1058     06A1                     u241:
  1059     06A1  2E93               	goto	l827
  1060     06A2                     u240:
  1061     06A2                     l833:
  1062     06A2  3001               	movlw	1
  1063     06A3                     u255:
  1064     06A3  1003               	clrc
  1065     06A4  0DF5               	rlf	___lwdiv@quotient,f
  1066     06A5  0DF6               	rlf	___lwdiv@quotient+1,f
  1067     06A6  3EFF               	addlw	-1
  1068     06A7  1D03               	skipz
  1069     06A8  2EA3               	goto	u255
  1070     06A9  0871               	movf	___lwdiv@divisor+1,w
  1071     06AA  0273               	subwf	___lwdiv@dividend+1,w
  1072     06AB  1D03               	skipz
  1073     06AC  2EAF               	goto	u265
  1074     06AD  0870               	movf	___lwdiv@divisor,w
  1075     06AE  0272               	subwf	___lwdiv@dividend,w
  1076     06AF                     u265:
  1077     06AF  1C03               	skipc
  1078     06B0  2EB2               	goto	u261
  1079     06B1  2EB3               	goto	u260
  1080     06B2                     u261:
  1081     06B2  2EBA               	goto	l839
  1082     06B3                     u260:
  1083     06B3                     l835:
  1084     06B3  0870               	movf	___lwdiv@divisor,w
  1085     06B4  02F2               	subwf	___lwdiv@dividend,f
  1086     06B5  0871               	movf	___lwdiv@divisor+1,w
  1087     06B6  1C03               	skipc
  1088     06B7  03F3               	decf	___lwdiv@dividend+1,f
  1089     06B8  02F3               	subwf	___lwdiv@dividend+1,f
  1090     06B9                     l837:
  1091     06B9  1475               	bsf	___lwdiv@quotient,0
  1092     06BA                     l839:
  1093     06BA  3001               	movlw	1
  1094     06BB                     u275:
  1095     06BB  1003               	clrc
  1096     06BC  0CF1               	rrf	___lwdiv@divisor+1,f
  1097     06BD  0CF0               	rrf	___lwdiv@divisor,f
  1098     06BE  3EFF               	addlw	-1
  1099     06BF  1D03               	skipz
  1100     06C0  2EBB               	goto	u275
  1101     06C1                     l841:
  1102     06C1  3001               	movlw	1
  1103     06C2  02F7               	subwf	___lwdiv@counter,f
  1104     06C3  1D03               	btfss	3,2
  1105     06C4  2EC6               	goto	u281
  1106     06C5  2EC7               	goto	u280
  1107     06C6                     u281:
  1108     06C6  2EA2               	goto	l833
  1109     06C7                     u280:
  1110     06C7                     l843:
  1111     06C7  0876               	movf	___lwdiv@quotient+1,w
  1112     06C8  00F1               	movwf	?___lwdiv+1
  1113     06C9  0875               	movf	___lwdiv@quotient,w
  1114     06CA  00F0               	movwf	?___lwdiv
  1115     06CB                     l431:
  1116     06CB  0008               	return
  1117     06CC                     __end_of___lwdiv:
  1118                           
  1119                           	psect	text4
  1120     0640                     __ptext4:	
  1121 ;; *************** function _adc_reading *****************
  1122 ;; Defined at:
  1123 ;;		line 21 in file "./../../api/machine/adc.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  2    0[COMMON] unsigned int 
  1130 ;; Registers used:
  1131 ;;		wreg
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1137 ;;      Params:         2       0       0       0       0
  1138 ;;      Locals:         0       0       0       0       0
  1139 ;;      Temps:          0       0       0       0       0
  1140 ;;      Totals:         2       0       0       0       0
  1141 ;;Total ram usage:        2 bytes
  1142 ;; Hardware stack levels used: 1
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_main
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150     0640                     _adc_reading:	
  1151                           ;psect for function _adc_reading
  1152                           
  1153     0640                     l869:	
  1154                           ;incstack = 0
  1155                           ; Regs used in _adc_reading: [wreg]
  1156                           
  1157                           
  1158                           ;./../../api/machine/adc.c: 22:     ADCON0bits.GO_DONE = 1;
  1159     0640  1283               	bcf	3,5	;RP0=0, select bank0
  1160     0641  1303               	bcf	3,6	;RP1=0, select bank0
  1161     0642  149F               	bsf	31,1	;volatile
  1162     0643                     l27:	
  1163                           ;./../../api/machine/adc.c: 23:     while (ADCON0bits.GO_DONE == 1);
  1164                           
  1165     0643  189F               	btfsc	31,1	;volatile
  1166     0644  2E46               	goto	u351
  1167     0645  2E47               	goto	u350
  1168     0646                     u351:
  1169     0646  2E43               	goto	l27
  1170     0647                     u350:
  1171     0647                     l871:
  1172                           
  1173                           ;./../../api/machine/adc.c: 24:     return ((ADRESH << 8) | ADRESL);
  1174     0647  081E               	movf	30,w	;volatile
  1175     0648  00F1               	movwf	?_adc_reading+1
  1176     0649  1683               	bsf	3,5	;RP0=1, select bank1
  1177     064A  1303               	bcf	3,6	;RP1=0, select bank1
  1178     064B  081E               	movf	30,w	;volatile
  1179     064C  00F0               	movwf	?_adc_reading
  1180     064D                     l30:
  1181     064D  0008               	return
  1182     064E                     __end_of_adc_reading:
  1183     007E                     btemp	set	126	;btemp
  1184     007E                     wtemp0	set	126
  1185                           
  1186                           	psect	idloc
  1187                           
  1188                           ;Config register IDLOC0 @ 0x2000
  1189                           ;	unspecified, using default values
  1190     2000                     	org	8192
  1191     2000  3FFF               	dw	16383
  1192                           
  1193                           ;Config register IDLOC1 @ 0x2001
  1194                           ;	unspecified, using default values
  1195     2001                     	org	8193
  1196     2001  3FFF               	dw	16383
  1197                           
  1198                           ;Config register IDLOC2 @ 0x2002
  1199                           ;	unspecified, using default values
  1200     2002                     	org	8194
  1201     2002  3FFF               	dw	16383
  1202                           
  1203                           ;Config register IDLOC3 @ 0x2003
  1204                           ;	unspecified, using default values
  1205     2003                     	org	8195
  1206     2003  3FFF               	dw	16383
  1207                           
  1208                           	psect	config
  1209                           
  1210                           ;Config register CONFIG1 @ 0x2007
  1211                           ;	Oscillator Selection bits
  1212                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1213                           ;	Watchdog Timer Enable bit
  1214                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1215                           ;	Power-up Timer Enable bit
  1216                           ;	PWRTE = OFF, PWRT disabled
  1217                           ;	RE3/MCLR pin function select bit
  1218                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1219                           ;	Code Protection bit
  1220                           ;	CP = OFF, Program memory code protection is disabled
  1221                           ;	Data Code Protection bit
  1222                           ;	CPD = OFF, Data memory code protection is disabled
  1223                           ;	Brown Out Reset Selection bits
  1224                           ;	BOREN = OFF, BOR disabled
  1225                           ;	Internal External Switchover bit
  1226                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1227                           ;	Fail-Safe Clock Monitor Enabled bit
  1228                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1229                           ;	Low Voltage Programming Enable bit
  1230                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1231                           ;	In-Circuit Debugger Mode bit
  1232                           ;	DEBUG = 0x1, unprogrammed default
  1233     2007                     	org	8199
  1234     2007  20D2               	dw	8402
  1235                           
  1236                           ;Config register CONFIG2 @ 0x2008
  1237                           ;	Brown-out Reset Selection bit
  1238                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1239                           ;	Flash Program Memory Self Write Enable bits
  1240                           ;	WRT = OFF, Write protection off
  1241     2008                     	org	8200
  1242     2008  3FFF               	dw	16383

Data Sizes:
    Strings     14
    Constant    10
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     19      22
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 1
		 -> caracteres(BANK0[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    1168
                                             13 BANK0      6     6      0
                        _adc_reading
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1121
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _adc_reading                                          2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_reading
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      24       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     13      16       5       27.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      24      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Jan 31 09:40:50 2024

                      pc 0002                       l30 064D                       l42 070C  
                     l27 0643                       fsr 0004                      l155 07F6  
                    l431 06CB                      l441 0687                      l821 0688  
                    l901 077B                      l831 069E                      l823 068A  
                    l911 07D0                      l841 06C1                      l833 06A2  
                    l825 0690                      l913 07D5                      l905 0797  
                    l835 06B3                      l827 0693                      l843 06C7  
                    l851 0657                      l915 07D9                      l907 07A1  
                    l931 06D9                      l837 06B9                      l829 069A  
                    l861 0676                      l853 065E                      l909 07A4  
                    l917 07E2                      l941 06E4                      l933 06DA  
                    l871 0647                      l839 06BA                      l863 067D  
                    l855 0662                      l847 064E                      l919 07F2  
                    l951 0710                      l943 06E7                      l935 06DB  
                    l927 06CC                      l857 0666                      l849 0654  
                    l865 0683                      l881 0747                      l953 0718  
                    l945 06EB                      l937 06DE                      l929 06D4  
                    l859 0670                      l891 076D                      l883 074C  
                    l875 0739                      l955 0723                      l947 06FB  
                    l939 06E1                      l869 0640                      l893 0775  
                    l885 074E                      l877 073C                      l949 0707  
                    l895 0779                      l879 0742                      l977 0765  
                    l889 0753                      u220 0690                      u221 068F  
                    u310 0666                      u311 0665                      u240 06A2  
                    u320 0670                      u400 07F2                      u241 06A1  
                    u321 066F                      u305 0658                      u401 07F1  
                    u410 0710                      u235 0694                      u411 070F  
                    u260 06B3                      u340 0683                      u420 0723  
                    u261 06B2                      u341 0682                      u325 066C  
                    u421 0722                      u350 0647                      u351 0646  
                    u255 06A3                      u335 0677                      u280 06C7  
                    u360 0742                      u281 06C6                      u265 06AF  
                    u361 0741                      u290 0654                      u370 0796  
                    u275 06BB                      u291 0653                      u371 0795  
                    u380 07A1                      u381 07A0                      u437 072B  
                    u390 07E2                      u391 07E1                      u375 0792  
                    _adc 0033                      fsr0 0004                      indf 0000  
                   STR_1 0013                     _TXIF 0064                     _main 06CC  
                   btemp 007E                     start 0000             main@caracter 0032  
                  ?_main 0070          __end_of___lwdiv 06CC          __end_of___lwmod 0688  
                  _SPBRG 0099                    _TXREG 0019          __end_of_dpowers 0013  
                  main@i 0030                    pclath 000A                    status 0003  
                  wtemp0 007E          __end_of_sprintf 07F7          __initialization 07F7  
           __end_of_main 0736                   ??_main 002D                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
              ??___lwdiv 0074                ??___lwmod 007C                ??_sprintf 0023  
__end_of__initialization 07FC           __pcstackCOMMON 0070               _caracteres 0035  
             __pbssBANK0 0033               __pmaintext 06CC            ??_adc_reading 0072  
             __stringtab 0003                  ___lwdiv 0688                  ___lwmod 064E  
                __ptext1 0736                  __ptext2 064E                  __ptext3 0688  
                __ptext4 0640                  _dpowers 0009      __end_of_adc_reading 064E  
                _sprintf 0736     end_of_initialization 07FC                _RCSTAbits 0018  
              _TXSTAbits 0098              _adc_reading 0640      start_initialization 07F7  
              ___latbits 0002            __pcstackBANK0 0020              sprintf@flag 0026  
            sprintf@prec 002A         ___lwdiv@dividend 0072                 ?___lwdiv 0070  
               ?___lwmod 0078                __pstrings 0003         ___lwdiv@quotient 0075  
               ?_sprintf 0020               _ADCON0bits 001F              __stringbase 0008  
           ?_adc_reading 0070       __end_of__stringtab 0009               sprintf@val 0028  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0077                sprintf@ap 0027  
              sprintf@sp 002B         ___lwmod@dividend 007A                stringcode 0003  
               sprintf@c 002C                 sprintf@f 0020          ___lwmod@divisor 0078  
        ___lwmod@counter 007D                 stringdir 0003                 stringtab 0003  
