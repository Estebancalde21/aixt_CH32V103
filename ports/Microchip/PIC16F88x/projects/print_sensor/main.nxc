// This NXC code was automatically generated by Aixt Project
// Device = Atmel AT91SAM7S256 + Atmel AVR ATmega48
// Board = LEGO Mindstorms NXT intelligent brick
// Backend = nxc


#define     current_tick(...)                  CurrentTick(__VA_ARGS__)
#define     first_tick(...)                    FirstTick(__VA_ARGS__)
#define     reset_sleep_timer(...)             ResetSleepTimer(__VA_ARGS__)
#define     sleep_ms(...)                      Wait(__VA_ARGS__)					//custom
#define     yield(...)                         Yield(__VA_ARGS__)
#define     stop_all_tasks(...)                StopAllTasks(__VA_ARGS__)
#define     stop_program(...)                  Stop(__VA_ARGS__)
#define     exit_to(...)                       ExitTo(__VA_ARGS__)
#define     precedes(...)                      Precedes(__VA_ARGS__)
#define     follows(...)                       Follows(__VA_ARGS__)
#define     acquire(...)                       Acquire(__VA_ARGS__)
#define     release(...)                       Release(__VA_ARGS__)
#define     start_task(...)                    StartTask(__VA_ARGS__)
#define     stop_task(...)                     StopTask(__VA_ARGS__)
#define     branch_test(...)                   BranchTest(__VA_ARGS__)
#define     branch_comp(...)                   BranchComp(__VA_ARGS__)
#define		sleep(TS)							Wait(TS*1000)		//custom
#define     power_down(...)              PowerDown(__VA_ARGS__)
#define     sleep_now(...)               SleepNow(__VA_ARGS__)
#define     reboot_in_firmware_mode(...) RebootInFirmwareMode(__VA_ARGS__)
#define 	s1	S1
#define 	s2	S2
#define 	s3	S3
#define 	s4	S4
#define 	i1	IN_1
#define 	i2	IN_2
#define 	i3	IN_3
#define 	i4	IN_4
#define 	sensor__touch   		SENSOR_TOUCH
#define 	sensor__light   		SENSOR_LIGHT
#define 	sensor__rotation   		SENSOR_ROTATION
#define 	sensor__celsius   		SENSOR_CELSIUS
#define 	sensor__fahrenheit   	SENSOR_FAHRENHEIT
#define 	sensor__pulse   		SENSOR_PULSE
#define 	sensor__edge    		SENSOR_EDGE
#define 	sensor__nxtlight   		SENSOR_NXTLIGHT
#define 	sensor__sound   		SENSOR_SOUND
#define 	sensor__lowspeed_9v  	SENSOR_LOWSPEED_9V
#define 	sensor__lowspeed   		SENSOR_LOWSPEED
#define 	sensor__colorfull   	SENSOR_COLORFULL
#define 	sensor__colorred   		SENSOR_COLORRED
#define 	sensor__colorgreen   	SENSOR_COLORGREEN
#define 	sensor__colorblue   	SENSOR_COLORBLUE
#define 	sensor__colornone   	SENSOR_COLORNONE
#define		sensor__set_type(...)                		SetSensorType(__VA_ARGS__)
#define		sensor__set_mode(...)          				SetSensorMode(__VA_ARGS__)
#define		sensor__clear(...)            				ClearSensor(__VA_ARGS__)
#define		sensor__reset(...)            				ResetSensor(__VA_ARGS__)
#define		sensor__set(...)              				SetSensor(__VA_ARGS__)
#define		sensor__set_touch(...)         				SetSensorTouch(__VA_ARGS__)
#define		sensor__set_light(...)         				SetSensorLight(__VA_ARGS__)
#define		sensor__set_sound(...)         				SetSensorSound(__VA_ARGS__)
#define		sensor__set_lowspeed(...)      				SetSensorLowspeed(__VA_ARGS__)
#define		sensor__set_ultrasonic(...)    				SetSensorUltrasonic(__VA_ARGS__)
#define		sensor__set_e_meter(...)        			SetSensorEMeter(__VA_ARGS__)
#define		sensor__set_temperature(...)   				SetSensorTemperature(__VA_ARGS__)
#define		sensor__set_color_full(...)     			SetSensorColorFull(__VA_ARGS__)
#define		sensor__set_color_red(...)      			SetSensorColorRed(__VA_ARGS__)
#define		sensor__set_color_green(...)    			SetSensorColorGreen(__VA_ARGS__)
#define		sensor__set_color_blue(...)     			SetSensorColorBlue(__VA_ARGS__)
#define		sensor__set_color_none(...)     			SetSensorColorNone(__VA_ARGS__)
#define		sensor__read(...)		                	Sensor(__VA_ARGS__)
#define		sensor__boolean(...)            			SensorBoolean(__VA_ARGS__)
#define		sensor__digi_pins_direction(...)        	SensorDigiPinsDirection(__VA_ARGS__)
#define		sensor__digi_pins_output_level(...)      	SensorDigiPinsOutputLevel(__VA_ARGS__)
#define		sensor__digi_pins_status(...)           	SensorDigiPinsStatus(__VA_ARGS__)
#define		sensor__invalid(...)                  		SensorInvalid(__VA_ARGS__)
#define		sensor__mode(...)                     		SensorMode(__VA_ARGS__)
#define		sensor__normalized(...)               		SensorNormalized(__VA_ARGS__)
#define		sensor__raw(...)                      		SensorRaw(__VA_ARGS__)
#define		sensor__scaled(...)                   		SensorScaled(__VA_ARGS__)
#define		sensor__type(...)                     		SensorType(__VA_ARGS__)
#define		sensor__value(...)                    		SensorValue(__VA_ARGS__)
#define		sensor__value_bool(...)                		SensorValueBool(__VA_ARGS__)
#define		sensor__value_raw(...)                 		SensorValueRaw(__VA_ARGS__)
#define		sensor__custom_active_status(...)       	CustomSensorActiveStatus(__VA_ARGS__)
#define		sensor__custom_percent_full_scale(...)   	CustomSensorPercentFullScale(__VA_ARGS__)
#define		sensor__custom_zero_offset(...)         	CustomSensorZeroOffset(__VA_ARGS__)
#define		sensor__set_custom_active_status(...)    	SetCustomSensorActiveStatus(__VA_ARGS__)
#define		sensor__set_custom_percent_full_scale(...)	SetCustomSensorPercentFullScale(__VA_ARGS__)
#define		sensor__set_custom_zero_offset(...)      	SetCustomSensorZeroOffset(__VA_ARGS__)
#define		sensor__set_boolean(...)               		SetSensorBoolean(__VA_ARGS__)
#define		sensor__set_digi_pins_direction(...)     	SetSensorDigiPinsDirection(__VA_ARGS__)
#define		sensor__set_digi_pins_output_level(...)   	SetSensorDigiPinsOutputLevel(__VA_ARGS__)
#define		sensor__set_digi_pins_status(...)        	SetSensorDigiPinsStatus(__VA_ARGS__)
#define		sensor__sys_color_read(...)             	SysColorSensorRead(__VA_ARGS__)
#define		sensor__read_colors_ex(...)              	ReadSensorColorEx(__VA_ARGS__)
#define		sensor__read_colors_raw(...)             	ReadSensorColorRaw(__VA_ARGS__)
#define		sensor__read_color_raw(...)           		ColorSensorRaw(__VA_ARGS__)
#define		sensor__read_color_value(...)         		ColorSensorValue(__VA_ARGS__)
#define		sensor__read_ultrasonic(...) 			SensorUS(__VA_ARGS__)
#define		sensor__read_ultrasonic0(...) 			SensorUS0(__VA_ARGS__)
#define		sensor__us_wait(...) 					SensorUSWait(__VA_ARGS__)
#define		sensor__read_ultrasonic_ex(...) 		ReadSensorUSEx(__VA_ARGS__)
#define		sensor__read_ultrasonic_ex0(...) 		ReadSensorUSEx0(__VA_ARGS__)
#define		sensor__read_ultrasonic_ex_wait(...)	ReadSensorUSExWait(__VA_ARGS__)
#define		sensor__read_e_meter(...) 				ReadSensorEMeter(__VA_ARGS__)
#define		sensor__configure_temperature(...) 		ConfigureTemperatureSensor(__VA_ARGS__)
#define		sensor__read_temperature(...)			SensorTemperature(__VA_ARGS__)
#define     str__to_num(...)              StrToNum(__VA_ARGS__)
#define     str__str_len(...)             StrLen(__VA_ARGS__)
#define     str__index(...)               StrIndex(__VA_ARGS__)
#define     str__from_num(...)            NumToStr(__VA_ARGS__)
#define     str__str_cat(...)             StrCat(__VA_ARGS__)
#define     str__sub(...)                 SubStr(__VA_ARGS__)
#define     str__flatten(...)             Flatten(__VA_ARGS__)
#define     str__replace(...)             StrReplace(__VA_ARGS__)
#define     str__format_num(...)          FormatNum(__VA_ARGS__)
#define     str__format_val(...)          FormatVal(__VA_ARGS__)
#define     str__flatten_var(...)         FlattenVar(__VA_ARGS__)
#define     str__unflatten_var(...)       UnflattenVar(__VA_ARGS__)
#define     str__pos(...)                 Pos(__VA_ARGS__)
#define     str__byte_array_to(...)       ByteArrayToStr(__VA_ARGS__)
#define     str__byte_array_to_ex(...)    ByteArrayToStrEx(__VA_ARGS__)
#define     str__to_byte_array(...)       StrToByteArray(__VA_ARGS__)
#define     str__copy(...)                Copy(__VA_ARGS__)
#define     str__mid(...)                 MidStr(__VA_ARGS__)
#define     str__right(...)               RightStr(__VA_ARGS__)
#define     str__left(...)                LeftStr(__VA_ARGS__)
#define     str__len(...)                 strlen(__VA_ARGS__)
#define     str__cat(...)                 strcat(__VA_ARGS__)
#define     str__n_cat(...)               strncat(__VA_ARGS__)
#define     str__cpy(...)                 strcpy(__VA_ARGS__)
#define     str__n_cpy(...)               strncpy(__VA_ARGS__)
#define     str__cmp(...)                 strcmp(__VA_ARGS__)
#define     str__n_cmp(...)               strncmp(__VA_ARGS__)
#define     str__memcpy(...)              memcpy(__VA_ARGS__)
#define     str__memmove(...)             memmove(__VA_ARGS__)
#define     str__memcmp(...)              memcmp(__VA_ARGS__)
#define     str__address_of(...)          addressOf(__VA_ARGS__)
#define     str__reladdress_of(...)       reladdressOf(__VA_ARGS__)
#define     str__address_of_ex(...)       addressOfEx(__VA_ARGS__)
#define		str__upper_case(...) 	UpperCase(__VA_ARGS__)
#define		str__lower_case(...) 	LowerCase(__VA_ARGS__)
#define		str__upper_case_ex(...) 	UpperCaseEx(__VA_ARGS__)
#define		str__lower_case_ex(...) 	LowerCaseEx(__VA_ARGS__)
#define 	line8		LCD_LINE8
#define 	line7		LCD_LINE7
#define 	line6		LCD_LINE6
#define 	line5		LCD_LINE5
#define 	line4		LCD_LINE4
#define 	line3		LCD_LINE3
#define 	line2		LCD_LINE2
#define 	line1		LCD_LINE1
#define 	textline_1		TEXTLINE_1
#define 	textline_2		TEXTLINE_2
#define 	textline_3		TEXTLINE_3
#define 	textline_4		TEXTLINE_4
#define 	textline_5		TEXTLINE_5
#define 	textline_6		TEXTLINE_6
#define 	textline_7		TEXTLINE_7
#define 	textline_8		TEXTLINE_8
#define 	textlines 		TEXTLINES
#define     lcd__reset()                            ResetScreen()
#define     lcd__circle(...)                        CircleOut(__VA_ARGS__)
#define     lcd__line(...)                          LineOut(__VA_ARGS__)
#define     lcd__point(...)                         PointOut(__VA_ARGS__)
#define     lcd__rect(...)                          RectOut(__VA_ARGS__)
#define     lcd__text(...)	                        TextOut(__VA_ARGS__)
#define     lcd__num(...)                     		NumOut(__VA_ARGS__)
#define     lcd__ellipse(...)                       EllipseOut(__VA_ARGS__)
#define     lcd__poly(...)                          PolyOut(__VA_ARGS__)
#define     lcd__font_text(...)                    	FontTextOut(__VA_ARGS__)
#define     lcd__font_num(...)                		FontNumOut(__VA_ARGS__)
#define     lcd__graphic(...)                       GraphicOut(__VA_ARGS__)
#define     lcd__graphic_array(...)                 GraphicArrayOut(__VA_ARGS__)
#define     lcd__graphic_ex(...)                    GraphicOutEx(__VA_ARGS__)
#define     lcd__graphic_array_ex(...)              GraphicArrayOutEx(__VA_ARGS__)
#define     lcd__get_normal(...)                    GetDisplayNormal(__VA_ARGS__)
#define     lcd__set_normal(...)                    SetDisplayNormal(__VA_ARGS__)
#define     lcd__get_popup(...)                     GetDisplayPopup(__VA_ARGS__)
#define     lcd__set_popup(...)                     SetDisplayPopup(__VA_ARGS__)
#define     lcd__erase_mask(...)                    DisplayEraseMask(__VA_ARGS__)
#define     lcd__update_mask(...)                   DisplayUpdateMask(__VA_ARGS__)
#define     lcd__font(...)                          DisplayFont(__VA_ARGS__)
#define     lcd__display(...)                       DisplayDisplay(__VA_ARGS__)
#define     lcd__flags(...)                         DisplayFlags(__VA_ARGS__)
#define     lcd__text_lines_center_flags(...)       DisplayTextLinesCenterFlags(__VA_ARGS__)
#define     lcd__sys_draw_text(...)                 SysDrawText(__VA_ARGS__)
#define     lcd__sys_draw_point(...)                SysDrawPoint(__VA_ARGS__)
#define     lcd__sys_draw_line(...)                 SysDrawLine(__VA_ARGS__)
#define     lcd__sys_draw_circle(...)               SysDrawCircle(__VA_ARGS__)
#define     lcd__sys_draw_rect(...)                 SysDrawRect(__VA_ARGS__)
#define     lcd__sys_draw_graphic(...)              SysDrawGraphic(__VA_ARGS__)
#define     lcd__sys_set_mode(...)                  SysSetScreenMode(__VA_ARGS__)
#define     lcd__sys_display_execute_function(...)  SysDisplayExecuteFunction(__VA_ARGS__)
#define     lcd__contrast(...)                      DisplayContrast(__VA_ARGS__)
#define     lcd__sys_draw_graphic_array(...)        SysDrawGraphicArray(__VA_ARGS__)
#define     lcd__sys_draw_polygon(...)              SysDrawPolygon(__VA_ARGS__)
#define     lcd__sys_draw_ellipse(...)              SysDrawEllipse(__VA_ARGS__)
#define     lcd__sys_draw_font(...)                 SysDrawFont(__VA_ARGS__)
#define     lcd__clear()                         	ClearScreen(); cursor_x = 0; cursor_y = 56;
#define     lcd__clear_line(...)                    ClearLine(__VA_ARGS__)
#define     lcd__set_font(...)                      SetDisplayFont(__VA_ARGS__)
#define     lcd__set_display(...)                   SetDisplayDisplay(__VA_ARGS__)
#define     lcd__set_erase_mask(...)                SetDisplayEraseMask(__VA_ARGS__)
#define     lcd__set_flags(...)                     SetDisplayFlags(__VA_ARGS__)
#define     lcd__set_text_lines_center_flags(...)   SetDisplayTextLinesCenterFlags(__VA_ARGS__)
#define     lcd__set_update_mask(...)               SetDisplayUpdateMask(__VA_ARGS__)
#define     lcd__set_contrast(...)                  SetDisplayContrast(__VA_ARGS__)
#define     str__to_num(...)              StrToNum(__VA_ARGS__)
#define     str__str_len(...)             StrLen(__VA_ARGS__)
#define     str__index(...)               StrIndex(__VA_ARGS__)
#define     str__from_num(...)            NumToStr(__VA_ARGS__)
#define     str__str_cat(...)             StrCat(__VA_ARGS__)
#define     str__sub(...)                 SubStr(__VA_ARGS__)
#define     str__flatten(...)             Flatten(__VA_ARGS__)
#define     str__replace(...)             StrReplace(__VA_ARGS__)
#define     str__format_num(...)          FormatNum(__VA_ARGS__)
#define     str__format_val(...)          FormatVal(__VA_ARGS__)
#define     str__flatten_var(...)         FlattenVar(__VA_ARGS__)
#define     str__unflatten_var(...)       UnflattenVar(__VA_ARGS__)
#define     str__pos(...)                 Pos(__VA_ARGS__)
#define     str__byte_array_to(...)       ByteArrayToStr(__VA_ARGS__)
#define     str__byte_array_to_ex(...)    ByteArrayToStrEx(__VA_ARGS__)
#define     str__to_byte_array(...)       StrToByteArray(__VA_ARGS__)
#define     str__copy(...)                Copy(__VA_ARGS__)
#define     str__mid(...)                 MidStr(__VA_ARGS__)
#define     str__right(...)               RightStr(__VA_ARGS__)
#define     str__left(...)                LeftStr(__VA_ARGS__)
#define     str__len(...)                 strlen(__VA_ARGS__)
#define     str__cat(...)                 strcat(__VA_ARGS__)
#define     str__n_cat(...)               strncat(__VA_ARGS__)
#define     str__cpy(...)                 strcpy(__VA_ARGS__)
#define     str__n_cpy(...)               strncpy(__VA_ARGS__)
#define     str__cmp(...)                 strcmp(__VA_ARGS__)
#define     str__n_cmp(...)               strncmp(__VA_ARGS__)
#define     str__memcpy(...)              memcpy(__VA_ARGS__)
#define     str__memmove(...)             memmove(__VA_ARGS__)
#define     str__memcmp(...)              memcmp(__VA_ARGS__)
#define     str__address_of(...)          addressOf(__VA_ARGS__)
#define     str__reladdress_of(...)       reladdressOf(__VA_ARGS__)
#define     str__address_of_ex(...)       addressOfEx(__VA_ARGS__)
#define		str__upper_case(...) 	UpperCase(__VA_ARGS__)
#define		str__lower_case(...) 	LowerCase(__VA_ARGS__)
#define		str__upper_case_ex(...) 	UpperCaseEx(__VA_ARGS__)
#define		str__lower_case_ex(...) 	LowerCaseEx(__VA_ARGS__)

char cursor_x = 0;char cursor_y = 56;
char lcd__into_range(char num, char max, char min);

void lcd__move_to(char x, char y);

void lcd__print(string msg);

void lcd__println(string msg);


const char lcd__x_max = 90;
const char lcd__y_max = 56;


char lcd__into_range(char num, char max, char min) {
if(num > max) {return max;}else if(num < min) {return min;}else {return num;};
}


void lcd__move_to(char x, char y) {
cursor_x = lcd__into_range(x * 6, lcd__x_max, 0);
cursor_y = lcd__into_range(56 - (y * 8), lcd__y_max, 0);
}


void lcd__print(string msg) {
lcd__text(cursor_x, cursor_y, msg);
cursor_x += str__len(msg) * 6;
cursor_x = lcd__into_range(cursor_x, lcd__x_max, 0);
}


void lcd__println(string msg) {
lcd__print(msg);
cursor_y -= 8;
cursor_y = lcd__into_range(cursor_y, lcd__y_max, 0);
cursor_x = 0;
}


task main() {

sensor__set_light(i1);
long value = 0;
while(true) {
lcd__clear();
value = sensor__read(s1);
lcd__move_to(1, 1);
lcd__print("S1 = " + str__from_num(value));
sleep(1);
}
}